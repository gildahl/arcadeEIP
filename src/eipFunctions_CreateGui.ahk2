; arcadeEIP (eip.exe) - Arcade Emulator Integration Player
; Â© 2023 David G. Dahlstrom
; File: eipFunctions_CreateGui.ahk2

;Create arcadeEIP graphical screens.
ScreenCreate()
{
    CreateBackgroundScreen()  ;The black (or optionally colored) background 
    CreateAlphaScreen()       ;Transparent overlay for fade and pause images
    CreateSelectScreen()      ;The game selector menu screen
    CreateStartScreen()       ;The startup bookend screen
    CreateExitScreen()        ;The exit bookend screen
}

;Recreate only these screens when a new game is
;switched to in the same session.
ScreenRefresh()
{
    guiAlpha.Destroy()
    guiStart.Destroy()
    guiExit.Destroy()

    CreateAlphaScreen()
    CreateStartScreen()
    CreateExitScreen()
}

;A simple black (or optionally colored) background screen
CreateBackgroundScreen()
{
    global

    guiBackground := Gui(, "eipGui - guiBackground")
    guiBackground.Opt("-Caption")
    guiBackground.BackColor := start_back_color
    
    return
}

;The Alpha Screen is a black and normally tranparent overlay.
;It also doubles as host to the images/info seen on pause (see the PauseKey() function).
;Using the fade_window_class, the screen can be faded in two ways:
;  1. Fading the entire screen using oFadeAlphaWindow (method used by the select gui)
;     This fades the entire window, thus introducing transparency.
;  2. Fading the AlphaOverlay control on it using oFadeAlphaOverlay (method used when pausing under the select gui)
;     This fades/darkens the contents (such as pause images)
;Note that this would probably alos be the place to add bezel support as a possible future enhancement.
CreateAlphaScreen()
{
    global
    local label_xpos, label_ypos, assetTypes, typeCount

    guiAlpha := Gui(, "eipGui - guiAlpha")
    guiAlpha.Opt("-Caption")
    guiAlpha.BackColor := "Black" 
 
    ;Create Overlay (used by oFadeAlphaOverlay to dim the screen)
    ;This is basically a pictureless picture control    
    gGui.guiAlpha_Overlay := guiAlpha.AddPicture("BackgroundTrans x0 y0 h" . nScreenHeight . " w" . nScreenWidth . " vAlphaOverlay")

    ;Create "Pause" label - Not actually used at the moment	
    guiAlpha.SetFont("s40")
    gGui.guiAlpha_PauseLabel := guiAlpha.AddText("cWhite w" . nScreenWidth . " Center vPauseLabel", "Pause")
    gGui.guiAlpha_PauseLabel.GetPos(&label_posX, &label_posY, &label_posW, &label_posH)
    label_xpos := nScreenWidth / 2 - label_posW / 2
    label_ypos := nScreenHeight / 2 - label_posH / 2 

    gGui.guiAlpha_PauseLabel.Move(label_xpos, label_ypos)
    gGui.guiAlpha_PauseLabel.Visible := false ;hide this for now.
}

;This creates the startup bookend screen
CreateStartScreen()
{
    global

    ;Note *DON'T* make label_pos a local variable

    local label_width, stack_height
    local label_xpos, label_ypos, label_tag
    local rom_tag, rom_xpos, rom_ypos
    local screen_centerH, screen_centerW
    local bb_platform

    label_tag := gCfg.rom_name ? "Game..." : "System..."
    
    ;Create Start Screen
    guiStart := Gui(, "eipGui - guiStart")
    guiStart.Opt("-Caption")
    guiStart.BackColor := start_back_color

    guiStart.SetFont("s50")
    gGui.guiStart_Label := guiStart.AddText("cWhite w" . nScreenWidth . " Center vLabel", "Loading " . label_tag)
    gGui.guiStart_Label.GetPos(&label_posX, &label_posY, &label_posW, &label_posH)
    label_xpos := nScreenWidth / 2 - label_posW / 2 
    
    ;Create the information tag that appears centered at the bottom of the screen
    sys_tag := search_tag ? gCfg.proper_name . "[" . search_tag . "]" : gCfg.proper_name
    rom_tag := gCfg.rom_name ? sys_tag . " : " . gCfg.rom_name : sys_tag
    rom_tag := gCfg.rom_file ? sys_tag . " : " . gCfg.rom_file : rom_tag	

    ;Position the information tag
    guiStart.SetFont("s10")
    gGui.guiStart_Rom := guiStart.AddText("cWhite w" . nScreenWidth . " Center vRom", rom_tag)
    gGui.guiStart_Rom.GetPos(&rom_posX, &rom_posY, &rom_posW, &rom_posH)
    rom_ypos := nScreenHeight - rom_posH * 2
    rom_xpos := 0
    gGui.guiStart_Rom.Move(rom_xpos, rom_ypos)

    ;Create and position the license banner
    if (sLicenseType == "public" || gCfg.show_license == 1)
    {
        banner_ypos := nScreenHeight - rom_posH * 4
        gGui.guiStart_LicenseBanner := guiStart.AddText("cWhite w" . nScreenWidth . " Center vStartLicenseBanner", license_text)
        gGui.guiStart_LicenseBanner.Move(0, banner_ypos)
    }
    
    SplitPath logo_full_path,,,, &OutNameNoExt

    if (!FileExist(logo_full_path))
        LogEntry("NOTICE: logo file not found: " . logo_full_path . "`n")

    ;Check to see if a LaunchBox/BigBox platform is being referenced
    ;(since we won't want to show a LaunchBox/BigBox system image here, but rather the name of the game)
    if (oLaunchBox.SetAssetPath(gCfg.logo_folder, gCfg.marquee_folder))
        bb_platform := oLaunchBox.GetCurrentPlatform()
    else
        bb_platform := ""

    ;Display logo
    if (FileExist(logo_full_path) && OutNameNoExt != "default" && OutNameNoExt != gCfg.sys_key && OutNameNoExt != bb_platform)
    {
        gGui.guiStart_Logo := guiStart.AddPicture("BackgroundTrans vLogo", logo_full_path)
        gGui.guiStart_Logo.GetPos(&logo_posX, &logo_posY, &logo_posW, &logo_posH)

        ;The following code ensures that the logo fits in its designated position
        ;on the screen and keeps its aspect ratio
        if (logo_posH > nScreenHeight / 4) ;keep logo to no more than 1/4 the screen height
        {
            logoH := nScreenHeight / 4 
            logoW := Floor(logo_posW * logoH / logo_posH)
        }
        else
        {
            logoH := logo_posH
            logoW := logo_posW
        }

        if (logoW > nScreenWidth / 2) ;keep logo to no more than 1/2 the screen width
        {
            origLogoW := logoW
            logoW := nScreenWidth / 2
            logoH := Floor(logoW * logoH/origLogoW)
        }        
        
        screen_centerH := nScreenHeight / 2
        screen_centerW := nScreenWidth / 2
        stack_height := logoH + label_posH * 2
        
        logo_ypos := screen_centerH + stack_height/2 - logoH
        logo_xpos := screen_centerW - logoW / 2
        
        label_ypos := logo_ypos - label_posH * 2
        
        gGui.guiStart_Label.Move(label_xpos, label_ypos)
        gGui.guiStart_Logo.Move(logo_xpos, logo_ypos, logoW, logoH)
    }
    else
    {
        if (logo_full_path) ;but the file doesn't exist
        {
            ;Since we don't have an available image, show the game name instead
            rom_title := oEmulators.Emulators[gCfg.sys_key].meta_names.GetTitle(gCfg.rom_file)
            romTitle := rom_title ? rom_title : gCfg.rom_name

            guiStart.SetFont("s30")
            gGui.guiStart_GameTitle := guiStart.AddText("cWhite w" . nScreenWidth . " Center vGameTitle", romTitle)
            gGui.guiStart_GameTitle.GetPos(&title_posX, &title_posY, &title_posW, &title_posH)

            screen_centerH := nScreenHeight / 2
            screen_centerW := nScreenWidth / 2
            stack_height := title_posH + label_posH * 2
            
            title_ypos := screen_centerH + stack_height/2 - title_posH
            title_xpos := screen_centerW - title_posW / 2
            
            gGui.guiStart_GameTitle.Move(title_xpos, title_ypos)

            ;label_ypos := title_ypos - label_posH * 2            
        }

        label_ypos := nScreenHeight / 2 - label_posH / 2
        gGui.guiStart_Label.Move(label_xpos, label_ypos)
    }	
    
    return
}

;This creates the exit bookend screen.
;Note that there's a lot of code shared between this an the start screen, but keeping
;them separate is intentional so as not to convolute efforts to customize them separately.
CreateExitScreen()
{
    global

    ;Note *DON'T* make label_pos a local variable

    local label_width, stack_height
    local label_xpos, label_ypos, label_tag
    local rom_tag, rom_xpos, rom_ypos
    local screen_centerH, screen_centerW
    local bb_platform
    
    label_tag := gCfg.rom_name ? "Game..." : "System..."
    
    ;Create Exit Screen
    guiExit := Gui(, "eipGui - guiExit")
    guiExit.Opt("-Caption")
    guiExit.BackColor := exit_back_color

    guiExit.SetFont("s50")
    gGui.guiExit_Label := guiExit.AddText("cWhite w" . nScreenWidth . " Center vLabel", "Exiting " . label_tag)
    gGui.guiExit_Label.GetPos(&label_posX, &label_posY, &label_posW, &label_posH)

    label_xpos := nScreenWidth / 2 - label_posW / 2
    
    SplitPath logo_full_path,,,, &OutNameNoExt

    ;Check to see if a LaunchBox/BigBox platform is being referenced
    ;(since we won't want to show a LaunchBox/BigBox system image here, but rather the name of the game)
    if (oLaunchBox.SetAssetPath(gCfg.logo_folder, gCfg.marquee_folder))
        bb_platform := oLaunchBox.GetCurrentPlatform()
    else
        bb_platform := ""

    ;logos
    if (FileExist(logo_full_path) && OutNameNoExt != "default" && OutNameNoExt != gCfg.sys_key && OutNameNoExt != bb_platform)
    {
        gGui.guiExit_Logo := guiExit.AddPicture("BackgroundTrans vLogo", logo_full_path)
        gGui.guiExit_Logo.GetPos(&logo_posX, &logo_posY, &logo_posW, &logo_posH)

        ;The following code ensures that the logo fits on the screen
        if (logo_posH > nScreenHeight / 4)
        {
            logoH := nScreenHeight / 4
            logoW := Floor(logo_posW * logoH/logo_posH)
        }
        else
        {
            logoH := logo_posH
            logoW := logo_posW
        }

        if (logoW > nScreenWidth / 2)
        {
            origLogoW := logoW
            logoW := nScreenWidth / 2
            logoH := Floor(logoW * logoH/origLogoW)
        }
        
        screen_centerH := nScreenHeight / 2
        screen_centerW := nScreenWidth / 2
        stack_height := logoH + label_posH * 2
        
        logo_ypos := screen_centerH + stack_height/2 - logoH
        logo_xpos := screen_centerW - logoW / 2
        
        label_ypos := logo_ypos - label_posH * 2

        gGui.guiExit_Label.Move(label_xpos, label_ypos)
        gGui.guiExit_Logo.Move(logo_xpos, logo_ypos, logoW, logoH)
    }
    else
    {
        if (logo_full_path) ;but the file doesn't exist
        {
            ;Since we don't have an available image, show the game name in text
            rom_title := oEmulators.Emulators[gCfg.sys_key].meta_names.GetTitle(gCfg.rom_file)
            romTitle := rom_title ? rom_title : gCfg.rom_name

            guiExit.SetFont("s30")
            gGui.guiExit_GameTitle := guiExit.AddText("cWhite w" . nScreenWidth . " Center vGameTitle", romTitle)
            gGui.guiExit_GameTitle.GetPos(&title_posX, &title_posY, &title_posW, &title_posH)

            screen_centerH := nScreenHeight / 2
            screen_centerW := nScreenWidth / 2
            stack_height := title_posH + label_posH * 2
            
            title_ypos := screen_centerH + stack_height/2 - title_posH
            title_xpos := screen_centerW - title_posW / 2
            
            gGui.guiExit_GameTitle.Move(title_xpos, title_ypos)
            ;label_ypos := title_ypos - label_posH * 2
        }

        label_ypos := nScreenHeight / 2 - label_posH / 2
        gGui.guiExit_Label.Move(label_xpos, label_ypos)
    }
    
return
}

;This creates the main game selection screen (i.e. guiSelect).
;Note that we are just creating a basic black background window here. The actual contents
;and behavior of the selection screen are implemented in the select_list_control_class
CreateSelectScreen()
{  
    global

    guiSelect := Gui(, "eipGui - guiSelect")
    guiSelect.Opt("+LastFound -Caption")
    guiSelect.BackColor := "Black"
        
    return
}
