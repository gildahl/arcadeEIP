/************************************************************************
 * @description Scorecard dialog class
 * @file eipClass_ScorecardDialog.ahk2
 * @author  Â© 2024 David G. Dahlstrom
 * @date 2024/03/08
 * @version 0.4.2.0
 ***********************************************************************/

;The Scorecard Dialog is one manifestation of the Dialog screen.
;See the CreateDialog() method of the CreateGUI class in eipClass_CreateGui
;for the code that creates the components of this screen.
class ScorecardDialog
{
    static _bButtonPressed := false
    static _pCaptureBitmap := []
    static _pHCaptureBitmap := []
    static _tRegisteredTime := ""

    /**
     * Retrieve the initials entered into the highscore dialog
     * @returns {string} 
     */
    static GetInitials()
    {
        sInitials := ""
        Loop 3
        {
            sInitials := sInitials . gGui.guiDialog_HighScore_%A_Index%.Value
        }

        return sInitials
    }

    /**
     * Retrieve the score entered into the highscore dialog
     * @returns {string} 
     */
    static GetScore()
    {
        sScore := ""
        Loop 10
        {
            if (gGui.guiDialog_HighScore_%A_Index+3%.Value != "-")
                sScore := sScore . gGui.guiDialog_HighScore_%A_Index+3%.Value
        }

        return sScore
    }

    /**
     * Captures a screen image (but doesn't save it)
     */
    static CaptureScreen()
    {
        global gGui

        ;specify the screen area for the screenshot (fullscreen of monitor 1)
        Area := Area ?? { X: 0, Y: 0, W: A_ScreenWidth, H: A_ScreenHeight }

        ;Take a full resolution snapshot. This Bitmap is what will later get saved as a png.
        this._pCaptureBitmap := Gdip_BitmapFromScreen(0 "|" 0 "|" A_ScreenWidth "|" A_ScreenHeight) 

        ;A full-sized HBitmap is used for compatibility with the pause image
        this._pHCaptureBitmap := "HBITMAP:" Gdip_CreateHBITMAPFromBitmap(this._pCaptureBitmap)
        WinSetTransparent 255, "ahk_id " gGui.guiDialog_Picture2.Hwnd ;make thumbnail opaque

        ;Use GDI+ to perform Bicubic interpolation on the above screenshot
        ;to give it maximum quality when downsized into a "thumbnail"
        pic_w := Integer(CreateGUI.DialogPictureW)
        pic_h := Integer(CreateGUI.DialogPictureH)

        pBitmap:=Gdip_CreateBitmap(pic_w,pic_h,0x26200A)	; Create a new 32-bit RGBA bitmap at the smaller size
        G:=Gdip_GraphicsFromImage(pBitmap)			        ; Get a pointer to the graphics of the bitmap
        Gdip_SetInterpolationMode(G,7)				        ; Set Interpolation Mode (7 is high quality bicubic)
        Gdip_DrawImage(G,this._pCaptureBitmap,0,0,pic_w, pic_h)	; Draw the original image into the new bitmap
        pHBitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)   ; Get an HBitmap for compatibility with Picture control

        ;Display the resized "new" screen capture
        gGui.guiDialog_Picture2.Value := "HBITMAP:* " pHBitmap 

        ;clean-up
        Gdip_DisposeImage(pBitmap)
        Gdip_DeleteGraphics(G)

        ;*********************************************************************
        ;Also load the "Old" highscore screen if available
        ;*********************************************************************
        sOldScorePicture := gCfg.highscore_folder "\" gCfg.rom_name ".png"
        if (!FileExist(sOldScorePicture) || !HighScore.IsSavedHighScore())
            sOldScorePicture := scorecard_default_file

        WinSetTransparent 255, "ahk_id " gGui.guiDialog_Picture1.Hwnd ;make thumbnail opaque

        ;do same processing as above to rescale the imported "old" image
        pOldScoreBitmap := Gdip_CreateBitmapFromFile(sOldScorePicture)

        pBitmap := Gdip_CreateBitmap(pic_w,pic_h,0x26200A)	
        G:=Gdip_GraphicsFromImage(pBitmap)			        
        Gdip_SetInterpolationMode(G, 7)	;7 is the highest quality bicubic interpolation			       
        Gdip_DrawImage(G,pOldScoreBitmap,0,0,pic_w, pic_h)		
        pHBitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)   

        ;Display the resized "old" score screenshot
        gGui.guiDialog_Picture1.Value := "HBITMAP:* " pHBitmap
        gGui.guiDialog_Picture1.Move(,,pic_w, pic_h)

        Gdip_DisposeImage(pOldScoreBitmap) ;critical to making the .png file able to be deleted/updated
        Gdip_DisposeImage(pBitmap)
        Gdip_DeleteGraphics(G)
    }

    ;Saves the captured screen image to a png file.
    static SaveScreen()
    {
        if (gCfg.take_screenshots)
        {
            if (CreateDirAndLog(gCfg.highscore_folder))
            {
                gGui.guiDialog_Picture1.Value := ""
                if (DeleteAndLog("F", gCfg.highscore_folder "\" gCfg.rom_name ".png") <= 0) ;if file successfully deleted or doesn't exist
                {
                    if (gCfg.use_watermark)
                        this.SaveWithWatermark()
                    else
                        Gdip_SaveBitmapToFile(this._pCaptureBitmap, gCfg.highscore_folder "\" gCfg.rom_name ".png")
                }
            }
            else
                LogEntry("ERROR: Could not save highscore image.`n")
        }
    }

    static SaveWithWatermark()
    {
        sHSText := "Record High Score`n" ThouSep(Trim(this.GetScore())) "`nby " this.GetInitials() "`n" FormatTime(this._tRegisteredTime, "LongDate") "`n" FormatTime(this._tRegisteredTime, "Time")

        nWidth := Gdip_GetImageWidth(this._pCaptureBitmap) 
        nHeight := Gdip_GetImageHeight(this._pCaptureBitmap)

        pic_x := pic_y := 0
        pic_sx := pic_sy := 0
        pic_w := nWidth 
        pic_h := nHeight 
        pic_sw := pic_w
        pic_sh := pic_h
        dx := 0 
        dy := 0 

        hDIB_Capture := CreateDIBSection(pic_w, pic_h)
        hDC_Capture := CreateCompatibleDC() 
        obm_Capture := SelectObject(hDC_Capture, hDIB_Capture)
        G_Capture := Gdip_GraphicsFromHDC(hDC_Capture)

        ;Use high quality Bicubic (7) to resize here since it is probably the best quality
        Gdip_SetInterpolationMode(G_Capture, 7)
        Gdip_DrawImage(G_Capture, this._pCaptureBitmap, 0, 0, pic_w, pic_h, pic_sx, pic_sy, pic_sw, pic_sh)

        pBitmap_Text := Gdip_CreateBitmap(pic_w,pic_h, 0x26200A)
        G_Text := Gdip_GraphicsFromImage(pBitmap_Text)			

        ;Format the text
        pBrush := Gdip_BrushCreateSolid(ARGB:=0xffffffff)
        hFamily := Gdip_FontFamilyCreate("Impact")
        hFont := Gdip_FontCreate(hFamily, 100, 1)
        nFormatStyle :=  "" ? 0x4000 | 0x1000 : 0x4000
        hFormat := Gdip_StringFormatCreate(nFormatStyle)

        ;Align and position the text
        Gdip_SetStringFormatAlign(hFormat, 1) ;1=center (i.e. centers multiple lines)
        Gdip_SetTextRenderingHint(G_Text, 4)
        CreateRectF(&RC:="", 0, 0, 0, 0) ;initialize a string rectangle
        rcString := Gdip_MeasureString(G_Text, sHSText, hFont, hFormat, &RC) ;last 2 elements are chars & lines
        aStringRC := StrSplit(rcString, "|")
        CreateRectF(&rcTextPosition:="", Round(pic_w/2 - aStringRC[3]/2), Round(pic_h*0.60 - aStringRC[4]/2), aStringRC[3], aStringRC[4])

        ;Draw the watermark text on the image
        Gdip_DrawString(G_Text, sHSText, hFont, hFormat, pBrush, &rcTextPosition)
        Gdip_DrawImage(G_Capture, pBitmap_Text, 0, 0, pic_w, pic_h, pic_sx, pic_sy, pic_sw, pic_sh, 0.5) ;0.5 is the transparency of the text layer
        hDC_Capture := Gdip_GetDC(G_Capture)

        ;Flatten and save the image with watermark text
        hDIB_Merge := CreateDIBSection(pic_w, pic_h)
        hDC_Merge := CreateCompatibleDC() 
        obm_Merge := SelectObject(hDC_Merge, hDIB_Merge)
        BitBlt(hDC_Merge, 0, 0, pic_w, pic_h, hDC_Capture, 0, 0)
        pBitmap_Merge := Gdip_CreateBitmapFromHBITMAP(hDIB_Merge)
        Gdip_SaveBitmapToFile(pBitmap_Merge, gCfg.highscore_folder "\" gCfg.rom_name ".png")

        ;Display the image (uncomment if needed for testing)
        ;gGui := Gui()
        ;gGui.Opt("-Caption +E0x80000 +LastFound +AlwaysOnTop +ToolWindow +OwnDialogs")
        ;gGui.Show("NA") ;show the window
        ;UpdateLayeredWindow(gGui.Hwnd, hDC_Capture, dx, dy, pic_w, pic_h) ;the combined image
        ;UpdateLayeredWindow(gGui.Hwnd, hDC_Text, dx, dy, pic_w, pic_h) ;text only

        ;Clean-up
        Gdip_DeleteGraphics(G_Capture)
        Gdip_DeleteGraphics(G_Text)
        SelectObject(hDC_Capture, obm_Capture)
        DeleteObject(hDIB_Capture)
        DeleteDC(hDC_Capture)
        SelectObject(hDC_Merge, obm_Merge)
        ;DeleteObject(hDIB_Merge)
        DeleteDC(hDC_Merge)
        ;Gdip_DisposeImage(pBitmap_Capture)
        Gdip_DisposeImage(pBitmap_Text)
        Gdip_DisposeImage(pBitmap_Merge)

        this._pHCaptureBitmap := "HBITMAP:" hDIB_Merge
    }

    static DeleteScreen()
    {
        gGui.guiDialog_Picture1.Value := ""

        DeleteAndLog("F", gCfg.highscore_folder "\" gCfg.rom_name ".png")
        oPauseControl.DisableHighscorePauseImage()
    }

    ;Dispose the captured screen image
    static DisposeScreen()
    {
        if (gCfg.take_screenshots)
            Gdip_DisposeImage(this._pCaptureBitmap)
    }

    /**
     * Handle navigation in the high score dialog
     * 
     * @param sKey - s (select), u,d,r,l (up, down, right, left), 'reset' (resets screen) 
     * @returns {void} 
     */
    static HighScoreNavigate(sKey)
    {
        global gGui

        static nSelected := 1
        static oControl := gGui.guiDialog_HighScore_1
        static oControlFirstDigit := gGui.guiDialog_HighScore_4
        static oControlRegisterButton := gGui.guiDialog_HighScore_14
        static oInitials := Array("-"," ","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R",
                                "S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l",
                                "m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5",
                                "6","7","8","9","~","!","@","#","$","%","^","&","*","(",")","=","+","[","]","<",
                                ">","?","{","}",":",";",",",".","/","\","_") 

        static oDigits := Array("-","0","1","2","3","4","5","6","7","8","9")

        nMaxControls := 14

        ;select/launch key was pressed
        if (sKey == "s")
        {
            if (!this._bButtonPressed)
            {
                if (oControlRegisterButton.Enabled)
                {
                    this._bButtonPressed := true
                    oBASS.Play("select")

                    ;simulate a button press
                    ControlClick oControlRegisterButton,,,,, "D"
                    Sleep 500
                    ControlClick oControlRegisterButton,,,,, "U"
                    oControlRegisterButton.Enabled := false

                    if (oControlRegisterButton.Text == "Register")
                    {        
                        this._tRegisteredTime := A_Now
                        HighScore.SetHighScore(this.GetScore(),this.GetInitials(),,this._tRegisteredTime)

                        if (gCfg.take_screenshots)
                            this.SaveScreen() 
                        
                        this.Scorecard()   

                        if (gCfg.take_screenshots)
                            oPauseControl.SetHighscorePauseImage(this._pHCaptureBitmap)
                        
                        sleep(100)
                    }

                    if (oControlRegisterButton.Text == "Clear")
                    {
                        HighScore.SetHighScore(-1,"")

                        ;Send a NULL to the marquee to clear/remove the high score banner
                        oMarqueeMsg["Highscore"] := "NULL"
    
                        this.DeleteScreen() ;delete the high score .png image (if present)
                        this.Scorecard() 
                    }

                    if (oControlRegisterButton.Text == "Cancel")
                    {
                        this.Scorecard()
                    }
                }
            }
        }

        ;Up
        ;Keep in mind that for up and down, oControl is the currently selected control
        if (sKey == "u")
        {
            ;if first digit of score is a 0, don't permit any other digits to be changed
            if (nSelected >= 5 && nSelected <= 13 && oControlFirstDigit.Value == 0)
                return

            ;if user is changing an initial
            if (nSelected >= 1 && nSelected <= 3) 
            {
                ;permit list to wrap
                if (oControl.Value == oInitials[1])
                    oControl.Value := oInitials[oInitials.Length]
                else 
                    oControl.Value := oInitials[GetArrayIndex(oInitials, oControl.Value)-1]
            }

            ;if user is changing a digit in the score
            else if (nSelected >= 4 && nSelected <= 13) 
            {
                ;do nothing if cell is disabled
                if (oControl.Enabled) == false
                    return

                ;Skip "0" and/or "-" depending on the context
                if (oControl.Value == "0" && gGui.guiDialog_HighScore_%nSelected+1%.Enabled == true && nSelected < 13)
                    oControl.Value := oDigits[oDigits.Length]
                else if (oControl.Value == "-") 
                    oControl.Value := oDigits[oDigits.Length]
                else 
                    oControl.Value := oDigits[GetArrayIndex(oDigits, oControl.Value)-1]
            }

            oBASS.Play("click")

            if (nSelected == 4)
            {
                ;Don't allow zero if digit to right is enabled
                if (oControl.Value == "0" && gGui.guiDialog_HighScore_%nSelected+1%.Enabled)
                    oControl.Value := oDigits[oDigits.Length]
            }

            ;allow pushing up the joystick to move back
            if (nSelected == 14)
            {
                oControl.Enable := false

                nSelected--
                oControl := gGui.guiDialog_HighScore_%nSelected%

                if (oControl.Value != "-")
                    oControl.Enabled := true

                oControl.Opt("+Border")
                oControl.Redraw
            }

            SetControlColor()
            SetHighScoreText()
        }

        ;Down
        if (sKey == "d")
        {
            ;if first digit of score is a 0, don't permit any other digits to be changed
            if (nSelected >= 5 && nSelected <= 13 && oControlFirstDigit.Value == 0)
                return

            ;if user is changing an initial
            if (nSelected >= 1 && nSelected <= 3)
            {
                ;permit list to wrap
                if (oControl.Value == oInitials[oInitials.Length])
                    oControl.Value := oInitials[1]
                else 
                    oControl.Value := oInitials[GetArrayIndex(oInitials, oControl.Value)+1]              
            }

            ;if user is changing a digit in the score
            else if (nSelected >= 4 && nSelected <= 13) 
            {
                ;do nothing if cell is disabled
                if (oControl.Enabled) == false
                    return

                ;skip zero and "-" on first digit if second digit is enabled (special case)
                if (nSelected == 4 && oControl.Value == "9" && gGui.guiDialog_HighScore_%nSelected+1%.Enabled)
                    oControl.Value := "1"

                ;Skip "0" and/or "-" depending on the context
                else if (oControl.Value == oDigits[oDigits.Length] && gGui.guiDialog_HighScore_%nSelected+1%.Enabled == true && nSelected < 13)
                    oControl.Value := "0"
                else if (oControl.Value == oDigits[oDigits.Length])
                    oControl.Value := "-"
                else 
                    oControl.Value := oDigits[GetArrayIndex(oDigits, oControl.Value)+1]

                SetControlColor()
            }

            oBASS.Play("click")

            SetHighScoreText()
        }

        ;Right
        if (sKey == "r")
        {
            if (nSelected <= 13)
                oBASS.Play("browse")

            ;don't go anywhere when on the last control in the set
            if (nSelected == nMaxControls)
                return

            ;always remove the border from the cell we're leaving
            if (nSelected <= 14)
            {
                oControl.Opt("-Border")
                oControl.Redraw
            }

            ;disable digit if we are about to step off of it (going right) and it contains a "-"
            if (nSelected >= 4 && nSelected <= 13 && oControl.Value == "-")
                oControl.Enabled := false

            ;advance to the next control
            nSelected++
            oControl := gGui.guiDialog_HighScore_%nSelected%

            ;enable the next control
            if (nSelected == 4 && oControl.Enabled == false)
            {
                oControl.Enabled := true
                SetControlColor()
            }

            ;enable control if the digit to the left of it was enabled
            if (nSelected >=5 && nSelected <= 13 && gGui.guiDialog_HighScore_%nSelected-1%.Enabled == true && oControlFirstDigit.Value != "0") 
            {
                oControl.Enabled := true
                SetControlColor()
            }

            ;if on the register button, enable it and update 
            ;button's instructive text.
            if (nSelected == 14)
            {
                oBASS.Play("page")
                SetTimer HighscoreBump, -1
                oControl.Enabled := true
                ControlFocus oControl
            }
            else ;otherwise give it a border
            {
                oControl.Opt("+Border")
                oControl.Redraw
            }

            SetHighScoreText()

            return
        }

        ;Left
        if (sKey == "l")
        {
            if (nSelected >= 3)
                oBASS.Play("browse")
            else if (nSelected == 2)
            {
                oBASS.Play("error")
                SetTimer HighscoreBump, -1
            }

            ;don't go anywhere if we're on the first control in the set
            if (nSelected == 1)
                return

            ;always remove the border from any cell we're leaving.
            if (nSelected < 14)
            {
                oControl.Opt("-Border")
                oControl.Redraw
            }

            ;Always disable digit field when stepping off it going to the left if it contains a "-"
            if (nSelected >= 4 && nSelected <= 14 && oControl.Value == "-")
                oControl.Enabled := false

            ;go to the previous control
            nSelected--
            oControl := gGui.guiDialog_HighScore_%nSelected%

            ;Always enable leftmost digit when moving to the left
            if (nSelected == 4)
                oControl.Enabled := true

            ;Enable other digits only if the previous one was enabled
            if (nSelected >= 5 && nSelected <= 14 && gGui.guiDialog_HighScore_%nSelected-1%.Enabled == true)
                oControl.Enabled := true

            ;put border around last digit when coming back from the registration button
            ;and disable the button
            if (nSelected == 13)
            {
                oControl.Opt("+Border")
                oControl.Redraw

                oControlRegisterButton.Enabled := false
            }
            else ;otherwise, just enable the border
            {
                oControl.Opt("+Border")
                oControl.Redraw
            }

            SetHighScoreText()

            return
        }

        if (sKey == "reset")
        {
            nSelected := 1
            oControl := gGui.guiDialog_HighScore_1
            this._bButtonPressed := false

            SetHighScoreText()
            
            gGui.guiDialog_HighScore_CurrentScore.Value := HighScore.Score == -1 ? "High Score: 0" : HighScore.FormattedHighScore
            ;gGui.guiDialog_HighScore_Warning.Value := ""

            if (HighScore.DateTime)
                gGui.guiDialog_HighScore_DateTime.Value := "Set on: " FormatTime(HighScore.DateTime, "LongDate") " at " FormatTime(HighScore.DateTime, "Time")
            else
                gGui.guiDialog_HighScore_DateTime.Value := ""


            loop 14
            {
                if (A_Index == 1)
                {
                    gGui.guiDialog_HighScore_%A_Index%.Opt("+Border")
                    gGui.guiDialog_HighScore_%A_Index%.Value := "A"
                }
                if (A_Index >= 2 and A_Index <= 3)
                {
                    gGui.guiDialog_HighScore_%A_Index%.Opt("-Border")
                    gGui.guiDialog_HighScore_%A_Index%.Value := "A"
                }
                if (A_Index >= 4 and A_Index <= 13)
                {
                    gGui.guiDialog_HighScore_%A_Index%.Opt("-Border")
                    gGui.guiDialog_HighScore_%A_Index%.Value := "-"
                    gGui.guiDialog_HighScore_%A_Index%.Enabled := false
                }
                if (A_Index == 14)
                {
                    gGui.guiDialog_HighScore_%A_Index%.Enabled := false
                }
            }         
        }

        ;Closure function used above that calls this.SetDialogHighScoreText
        SetHighScoreText()
        {
            ;Set button text
            if (gGui.guiDialog_HighScore_4.Value == "-")
                gGui.guiDialog_HighScore_14.Text := "Cancel"
            else if (gGui.guiDialog_HighScore_4.Value == "0")
                gGui.guiDialog_HighScore_14.Text := "Clear"
            else 
                gGui.guiDialog_HighScore_14.Text := "Register"

            sType := ""
            if (nSelected >= 1 && nSelected <= 3)
                sType := "initials"
            else if (nSelected >= 4 && nSelected <= 13)
                sType := "score"
            else if (nSelected == 14)
                sType := "button"

            ;Update message based on context
            if (nSelected == "button")
                this.SetDialogHighScoreText(sType, oControlRegisterButton.Text, oControlRegisterButton.Enabled, gGui.guiDialog_HighScore_14.Text)
            else
                this.SetDialogHighScoreText(sType, oControl.Value, oControl.Enabled, gGui.guiDialog_HighScore_14.Text)                
        }

        SetControlColor()
        {
            if (nSelected > 4 && nSelected < 14)
            {
                if (oControl.Value == "-")
                    oControl.Opt("cLime")
                else
                    oControl.Opt("cWhite")
            }
            ;first digit has an additional color state
            else if (nSelected == 4)
            {
                if (oControl.Value == "-")
                    oControl.Opt("cLime")
                else if (oControl.Value == "0")
                    oControl.Opt("cyellow")
                else 
                    oControl.Opt("cWhite")
            }   
        }
    }    

    /**
     * Sets the instruction text of the high score dialog based on context
     * @param sType - May be "initials", "score", or "button"
     * @param sValue - The value of the currently selected element
     * @param bEnabled - Whether the element is enabled
     */
    static SetDialogHighScoreText(sType, sValue, bEnabled, sButtonText)
    {
        ;***** Display Debug information ************************
        ;gGui.guiDialog_HighScore_Debug.Visible := true
        ;enab := bEnabled == true ? "true" : "false"
        ;gGui.guiDialog_HighScore_Debug.Value := "sType: `"" sType "`"" ", sValue: `"" sValue "`", bEnabled: `"" enab "`" sButtonText: `"" sButtonText "`"" 
        ;********************************************************

        if (sType == "initials")
        {
            if (sButtonText == "Register" || sButtonText == "Cancel")
            {
                gGui.guiDialog_HighScore_Warning.Opt("clime")
                gGui.guiDialog_HighScore_Warning.Value := "Enter your initials!"

                gGui.guiDialog_HighScore_Instructions1.Value := "Did you break the current record high score?"
                gGui.guiDialog_HighScore_Instructions2.Value := "If so, enter your initials and the new high score!"

                if (bEnabled == true)
                    return
            }
        }
        else if (sType == "score")
        {
            if ((sButtonText == "Register" || sButtonText == "Cancel") && bEnabled)
            {
                gGui.guiDialog_HighScore_Warning.Opt("clime")
                gGui.guiDialog_HighScore_Warning.Value := "Enter your score!"

                gGui.guiDialog_HighScore_Instructions1.Value := "Did you break the current record high score?"
                gGui.guiDialog_HighScore_Instructions2.Value := "If so, enter your initials and the new high score!"

                return
            }
            if (sButtonText == "Cancel" && !bEnabled)
            {
                gGui.guiDialog_HighScore_Warning.Opt("clime")
                gGui.guiDialog_HighScore_Warning.Value := "Enter your score!"

                gGui.guiDialog_HighScore_Instructions1.Value := "Move back to the green cursor to begin entering your score,"
                gGui.guiDialog_HighScore_Instructions2.Value := "or move forward to the button to cancel."
            }
            else if (sButtonText == "Register" && !bEnabled)
            {
                gGui.guiDialog_HighScore_Warning.Opt("clime")
                gGui.guiDialog_HighScore_Warning.Value := "Enter your score!"

                gGui.guiDialog_HighScore_Instructions1.Value := "Move back to the green cursor to continue entering your score,"
                gGui.guiDialog_HighScore_Instructions2.Value := "or move forward to the button to register this score."
            }
            else if (sButtonText == "Clear")
            {
                gGui.guiDialog_HighScore_Warning.Opt("cyellow")
                gGui.guiDialog_HighScore_Warning.Value := "Saving a score of zero will clear the high score for this game."
                gGui.guiDialog_HighScore_Instructions1.Value := "Move to the Register button to clear this score,."
                gGui.guiDialog_HighScore_Instructions2.Value := "or change it to register a new high score."
            }
        }
        else if (sType == "button")
        {
            if (sButtonText == "Register")
            {
                if (this.GetScore() < HighScore.Score)
                {
                    gGui.guiDialog_HighScore_Warning.Opt("cyellow")
                    gGui.guiDialog_HighScore_Warning.Value := "New score is lower than the currently registered score."
                    gGui.guiDialog_HighScore_Instructions1.Value := "You may go back to edit, or press select to register anyway."
                    gGui.guiDialog_HighScore_Instructions2.Value := "To cancel, press the show/hide scorecard button again."
                }
                else if (this.GetScore() == HighScore.Score)
                {
                    gGui.guiDialog_HighScore_Warning.Opt("cyellow")
                    gGui.guiDialog_HighScore_Warning.Value := "New score is the same as the currently registered score." 
                    gGui.guiDialog_HighScore_Instructions1.Value := "You may go back to edit, or press select to register anyway."
                    gGui.guiDialog_HighScore_Instructions2.Value := "To cancel, press the show/hide scorecard button again."
                }
                else
                {
                    gGui.guiDialog_HighScore_Warning.Opt("clime")
                    gGui.guiDialog_HighScore_Warning.Value := "Register now!"
                    gGui.guiDialog_HighScore_Instructions1.Value := "Press select to register this new high score. To exit without"
                    gGui.guiDialog_HighScore_Instructions2.Value := "registering, press the show/hide scorecard button again."
                }
            }
            else if (sButtonText == "Clear")
            {
                gGui.guiDialog_HighScore_Warning.Opt("cYellow")
                gGui.guiDialog_HighScore_Warning.Value := "Press select to clear the currently saved high score for this game."
                gGui.guiDialog_HighScore_Instructions1.Value := "To cancel without clearing, press the show/hide scorecard button again,"
                gGui.guiDialog_HighScore_Instructions2.Value := "or go back to change the score to another value."
            }
            else ;Cancel
            {
                gGui.guiDialog_HighScore_Warning.Opt("cyellow")
                gGui.guiDialog_HighScore_Warning.Value := "You didn't enter a score!"
                gGui.guiDialog_HighScore_Instructions1.Value := "Go back to enter your score, or press select to cancel."
                gGui.guiDialog_HighScore_Instructions2.Value := ""
            }
        }
    }

    ;Initializes and displays the Scorecard dialog
    static Scorecard(theHotKey:="")
    {
        global gGui, g_guiscorecard

        ;If the Scorecard dialog is not currently displayed, initialize it.
        if (!g_guiscorecard)
        {
            if (gCfg.take_screenshots)
                oBASS.Play("shutter")
            else
                oBASS.Play("highscore")

            ;Capture the screen (but don't save it yet)
            if (gCfg.take_screenshots)
                ScorecardDialog.CaptureScreen()

            ModifyHotkeys("blocking")
            ControlActivationState.EnableHighScoreControls()

            ScorecardDialog.HighScoreNavigate("reset")

            ;Set speed of RunWaitTimer frequency
            ;Determines scroll performance in the select screen.
            SetTimer RunWaitTimer, 150

            oDetectInactivity.Suspend() ;turn off the timer

            guiAlpha.Opt("+AlwaysOnTop")
            guiDialog.Opt("+AlwaysOnTop")

            nX := CreateGUI.DialogScreenX
            nY := CreateGUI.DialogScreenY
            nW := CreateGUI.DialogScreenWidth
            nH := CreateGUI.DialogScreenHeight
 
            guiAlpha.Move(nX, nY, nW, nH)

            if (!gCfg.take_screenshots)
                guiAlpha.Opt("+Border")

            WinSetTransparent 0, "ahk_id " . gGui.guiAlpha_Overlay.Hwnd
            oFadeAlphaWindow.Start(1,200,20,16) ;dim the alpha screen

            Sleep(100) ;delay to allow fade-in to start

            ;Get the game name
            rom_title := oEmulators.Emulators[gCfg.sys_key].meta_names.GetTitle(gCfg.rom_file)
            romTitle := rom_title ? rom_title : gCfg.rom_name
            
            ;strip name of enclosures if needed
            if (oEmulators.Emulators[gCfg.sys_key].clean_lists >= 1) 
                romTitle := StripEnclosures(romTitle, 1)
            gGui.guiDialog_HighScore_Title.Value := romTitle

            ;reduce the font if game name won't fit
            fsz := CreateGUI.DialogScreenTitleFontSize
            fnt := gCfg.lst_font_type
            Loop
            {
                tsz := GetTextExtentPoint(romTitle, fnt, fsz)
                if (tsz < nW) 
                    break
                else
                    fsz--
            }

            gGui.guiDialog_HighScore_Title.SetFont("s" fsz " cWhite", fnt)

            Loop 14
            {
                gGui.guiDialog_HighScore_%A_Index%.Visible := true
            }

            gGui.guiDialog_HighScore_Title.Visible := true
            gGui.guiDialog_HighScore_CurrentScore.Visible := true
            gGui.guiDialog_HighScore_DateTime.Visible := true
            gGui.guiDialog_HighScore_Instructions1.Visible := true
            gGui.guiDialog_HighScore_Instructions2.Visible := true
            gGui.guiDialog_HighScore_Warning.Visible := true
            if (gCfg.take_screenshots)
            {
                gGui.guiDialog_Picture1.Visible := true
                gGui.guiDialog_Picture2.Visible := true
                gGui.guiDialog_PictureLabel1.Visible := true
                gGui.guiDialog_PictureLabel2.Visible := true
            }

            ;global that lets us know the high score screen is displayed
            g_guiscorecard := true
        }
        else ;Turn off the Scorecard dialog
        {
            ;clean-up screen bitmap
            if (gCfg.take_screenshots)
                ScorecardDialog.DisposeScreen()

            ;Hide the overlay text
            Loop 14
            {
                gGui.guiDialog_HighScore_%A_Index%.Visible := false
            }

            gGui.guiDialog_HighScore_Title.Visible := false
            gGui.guiDialog_HighScore_CurrentScore.Visible := false
            gGui.guiDialog_HighScore_DateTime.Visible := false
            gGui.guiDialog_HighScore_Instructions1.Visible := false
            gGui.guiDialog_HighScore_Instructions2.Visible := false
            gGui.guiDialog_HighScore_Warning.Visible := false
            gGui.guiDialog_Picture1.Visible := false
            gGui.guiDialog_Picture2.Visible := false
            gGui.guiDialog_PictureLabel1.Visible := false
            gGui.guiDialog_PictureLabel2.Visible := false

            ;Fade the alpha screen, then return it back to fullscreen 
            oFadeAlphaWindow.Start(200,0,20,16) ;undim the alpha screen
            Sleep(750) ;wait till fade is complete
            guiAlpha.Hide ;prevents screen artifacts/flashing
            guiAlpha.Opt("-Border")
            WinMove 0, 0, A_ScreenWidth, A_ScreenHeight, guiAlpha ;return to fullscreen
            guiAlpha.Show("NA") ;re-show without activation so its ready for next time

            oDetectInactivity.Resume() ;turn the timer back on

            ;Reset RunWaitTimer to default frequecy
            SetTimer RunWaitTimer, runwait_default_freq

            ControlActivationState.DisableHighScoreControls()
            ModifyHotkeys("passthrough")

            guiAlpha.Opt("-AlwaysOnTop")

            ;global to let us know the high score screen is hidden
            g_guiscorecard := false
        }

        return
    }
}