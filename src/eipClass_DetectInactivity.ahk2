; arcadeEIP (eip.exe) - Arcade Emulator Integration Player
; Â© 2024 David G. Dahlstrom
; File: eipClass_DetectInactivity.ahk2

;This class monitors the system for inactivity (user NOT pressing buttons
;moving mouse, moving joysticks, etc), for the purpose of determining when
;auto-switching is allowed to happen.
class DetectInactivity_Class
{
	__New(callback, delay, unmute)
	{
		this._unmute := unmute ;unmute on activity setting
		this._count := 0 ;counts calls to support calls from independent threads
		this._delay := delay
		this._callback := callback ;normally, the AttractSwitch() function
		this._fInactivityTest := ObjBindMethod(this, "_inactivity_test")
		this._action_count := 0 ;used to count activity actions
		this._force_action := false
	}

	ActionCount
	{
		get => this._action_count
		set => this._action_count := value
	}

    delay
	{
		get => this._delay
		set => this._delay := value
	}
	
	Activate()
	{
		global
		local id, mJoylist, mState, fInactivityTest, numButtons

		mJoylist := Map()

		;delay must be >= 20 seconds, otherwise delay
		;is considered set to infinity
		if (this._delay < 20)
			this._delay := 3000000000 ;about 100 years should be a good approximation for infinity

		Loop 16
		{
			if (GetKeyState(A_Index "JoyName"))
			{	
				id := A_Index

				;probe joystick's current state. Disqualify it if it is in a deflected state during initialization
				Sleep(100) ;needed between reads
				nXState := GetKeyState(id "JoyX")
				nYState := GetKeyState(id "JoyY")
				if (nXState < 30 || nYState < 30 || nXState > 70 || nYState > 70)
				{
					LogEntry("NOTICE: Skipped Joy: " id ", info: `"" mState["info"] "`", name: `"" mState["name"] "`", X: " nXState ", Y: " nYState "`n")
					continue
				}
				
				mState := Map()
				mState["id"] := id
				mState["X"] := nXState ;GetKeyState(id "JoyX")
				mState["Y"] := nYState ;GetKeyState(id "JoyY")
				mState["info"] := GetKeyState(id "JoyInfo")
				mState["name"] := GetKeyState(id "JoyName")

				LogEntry("INFO: Detected Joy: " id ", info: `"" mState["info"] "`", name: `"" mState["name"] "`", X: " nXState ", Y: " nYState "`n")
				
				mJoylist[id] := mState	

				numButtons := GetKeyState(id "JoyButtons")
				if (numButtons > 16) ;ahk can't seem to handle more than 16 buttons
					numButtons := 16

				;Binding joystick buttons to hotkeys seems to introduce a serious performance
				;issue if an XInput device is present but turned off.  So this code has been deprecated
				;in favor of poking the inactivity timer in the XInput handler when buttons are pressed.
				
				;make all controller button presses call _joy_button_action
				Loop numButtons
				{
					HotKey "*~" . id . "Joy" . A_Index, ObjBindMethod(this, "_joy_button_action")
				}
				
			}
		}
		
		this._joylist := mJoylist
		
		this._last_idle_time := A_TimeIdlePhysical 
		fInactivityTest := this._fInactivityTest

		;call _inactivity_test() once a second
		SetTimer fInactivityTest, cInactivityTest_Period ;1000 ms	
		
		return
	}

	;Obtain joystick state
	;Possible states are "r", "l", "u", "d"
	;Note that this function is used for navigation control, not inactivity detection.
	GetJoyState()
	{
		static sLastReturnedValue := "", nSlowCount := 0, nLastTickCount := A_TickCount
		static nPauseDelay := 300

    	mJoyX := Map()
		mJoyY := Map()

		static horiz := gCfg.joy_horiz == "all" ? 1 : 0
    	static vert := gCfg.joy_vert == "all" ? 1 : 0

		mJoylist := this._joylist

		for n, mState in mJoylist
		{
			id := mState["id"]

			mJoyX[id] := GetKeyState(id "JoyX")
			mJoyY[id] := GetKeyState(id "JoyY")

			;OutputDebug "id: " id " oldX: " Round(mState["X"]) " newX: " Round(mJoyX[id]) " oldY: " Round(mState["Y"]) " newY: " Round(mJoyY[id]) " deltaX: " Round(mJoyX[id] - mState["X"]) " deltaY: " Round(mJoyY[id] - mState["Y"]) "`n"

			Try 
			{
				if (mJoyX[id] - mState["X"] > 20 && horiz)
				{
					;LogEntry("Joy: r " id ", deflection: " mJoyX[id] "`n")
					return "r"
				}
				if (mJoyX[id] - mState["X"] < -20 && horiz)
				{
					;LogEntry("Joy: l " id ", deflection: " mJoyX[id] "`n")
					return "l"
				}
				if (mJoyY[id] - mState["Y"] > 20 && vert)
				{
					;LogEntry("Joy: d " id ", deflection: " mJoyY[id] "`n")
					return "d"
				}
				if (mJoyY[id] - mState["Y"] < -20 && vert)
				{
					;LogEntry("Joy: u " id ", deflection: " mJoyY[id] "`n")
					return "u"
				}
			}
		}

		return ""
	}

	Resume()
	{
		;only resume if all other suspensions have been resumed
		this._count--
		if (this._count > 0)
			return
		
		this._last_idle_time := A_TimeIdlePhysical 
		fInactivityTest := this._fInactivityTest
		SetTimer fInactivityTest, cInactivityTest_Period

		return
	}

	;A method to "poke" the object to simulate an interruping activty
	;and reset the idle timer.
	;Used by the Schedule class
	Poke()
	{
		;OutputDebug "Poke Internal`n"
		this._last_idle_time := A_TimeIdlePhysical
	}

	Suspend()
	{
		;keep track nested calls
		this._count++
		if (this._count > 1)
			return

		fInactivityTest := this._fInactivityTest
		SetTimer fInactivityTest, 0

		return
	}
	
	Inactivate()
	{
		fInactivityTest := this._fInactivityTest
		SetTimer fInactivityTest, 0
		return
	}

	;Calling this has the effect of forcing the "inactivity action",
	;which is normally switching to the next game in the attract playlist
	ForceAction()
	{
		this._force_action := true
	}
	
	_inactivity_test(theHotkey:="")
	{
		mJoylist := this._joylist
		sound_set := false
		joy_test := "None detected"
		logEntry := ""
		mJoyX := Map()
		mJoyY := Map()

		;Whenever idle time drops below 1000, it must have been reset
		;by the press of a keyboard or mouse button.
		if (A_TimeIdlePhysical < 1000)
		{
			this._last_idle_time := A_TimeIdlePhysical

			;oVoice.Speak("action")
			;OutputDebug "Action`n"

			;used to monitor activity by external frequency monitor
			this._action_count++ 

			if (this._unmute)
				MasterSound.On() ;force sound unmute

			if (gCfg.idle_log)
			{
				t := FormatTime(A_Now, "hh:mm:ss")
				logEntry := "IdleInterrupted (key/mouse): [" . t . "]"			
			}
		}
		
		for n, mState in mJoylist
		{
			bJoystickMoved := false

			;Try statement avoids crash if a joystick gets detached
			Try {
				id := mState["id"]

				x := mJoyX[id] := GetKeyState(id "JoyX")
				y := mJoyY[id] := GetKeyState(id "JoyY")

				bJoystickMoved := ((Abs(mJoyX[id] - mState["X"]) > 20) || Abs(mJoyY[id] - mState["Y"]) > 20)
			}
		
			if (bJoystickMoved)
			{
				this._action_count++
				this._last_idle_time := A_TimeIdlePhysical

				if (!sound_set && this._unmute) ;only do once per test
				{
					sound_set := true
					MasterSound.On() ;force sound unmute
				}
				
				if (gCfg.idle_log)
				{
					joy_test := "X:" . x .  "  Y:" . y 
					
					t := FormatTime(A_Now, "hh:mm:ss")
					logEntry := "IdleInterrupted (joy): [" t "] JoyTest: " joy_test
				}
				break
			}
		}

		if (gCfg.idle_log && logEntry)
		{
			IdleLogEntry(logEntry)
			logEntry := ""
		}

		if (gCfg.idle_log && logEntry)
			IdleLogEntry(logEntry)

		;The delay time has been reached, so perform the action to be done
		timeIdlePhysical := A_TimeIdlePhysical
		if (timeIdlePhysical - this._last_idle_time > this._delay * 1000 || this._force_action) 
		{
			this._force_action := false
			this._inactivity_action()
		}

		;Useful timer debug code
		;lit := this._last_idle_time
		;diff := timeIdlePhysical - lit
		;OutputDebug LastIdleTime: %lit%  TimeIdlePhysical: %timeIdlePhysical%  Diff: %diff% `n

		return
	}
	
	_inactivity_action()
	{
		this._last_idle_time := A_TimeIdlePhysical 

		Critical "On"
		this._callback.Call()	;normally, the AttractSwitch() function
		Critical "Off"

		return
	}
	
	_joy_button_action(caller:="")
	{
		;a joystick button was pressed, so reset the last idle time
		this._last_idle_time := A_TimeIdlePhysical
		return
	}
}