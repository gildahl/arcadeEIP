; arcadeEIP (eip.exe) - Arcade Emulator Integration Player
; Â© 2023 David G. Dahlstrom
; File: eipClass_DetectInactivity.ahk2

;This class monitors the system for inactivity (user NOT pressing buttons
;moving mouse, moving joysticks, etc), for the purpose of determining when
;auto-switching is allowed to happen.
class DetectInactivity_Class
{
	__New(callback, delay, unmute)
	{
		this._unmute := unmute ;unmute on activity setting
		this._count := 0 ;counts calls to support calls from independent threads
		this._delay := delay
		this._callback := callback ;normally, the AttractSwitch() function
		this._fInactivityTest := ObjBindMethod(this, "_inactivity_test")
		this._action_count := 0 ;used to count activity actions
		this._force_action := false
	}

	ActionCount
	{
		set {
			this._action_count := value
			return
		}
		get {
			return this._action_count
		}
	}

    delay
	{
		set {
			this._delay := value
			return
		}
		get {
			return this._delay
		}
	}
	
	Activate()
	{
		global
		local id, joylist, state, fInactivityTest, numButtons

		joylist := Map()
		state := Map()

		;delay must be >= 20 seconds, otherwise delay
		;is considered set to infinity
		if (this._delay < 20)
			this._delay := 3000000000 ;about 100 years should be a good approximation for infinity

		Loop 16
		{
			if (GetKeyState(A_Index "JoyName"))
			{	
				id := A_Index
				
				;state := new state
				state["id"] := id
				state["X"] := GetKeyState(id "JoyX")
				state["Y"] := GetKeyState(id "JoyY")
				
				joylist[id] := state	

				numButtons := GetKeyState(id "JoyButtons")
				if (numButtons > 16) ;ahk can't seem to handle more than 16 buttons
					numButtons := 16

				Loop numButtons
				{
					HotKey "*~" . A_Index . "Joy" . id, ObjBindMethod(this, "_joy_button_action")
				}
			}
		}
		
		this._joylist := joylist
		
		this._last_idle_time := A_TimeIdlePhysical 
		fInactivityTest := this._fInactivityTest
		SetTimer fInactivityTest, cInactivityTest_Period ;1000 ms	
		
		return
	}

	Resume()
	{
		;c:=this._count
		;OutputDebug resume: %c%`n
		;only resume if all other suspensions have been resumed
		this._count--
		if (this._count > 0)
			return
		
		this._last_idle_time := A_TimeIdlePhysical 
		fInactivityTest := this._fInactivityTest
		SetTimer fInactivityTest, cInactivityTest_Period

		return
	}

	;A method to "poke" the object to simulate an activty
	;Used by the Schedule class
	Poke()
	{
		this._last_idle_time := A_TimeIdlePhysical
	}

	Suspend()
	{
		;keep track nested calls
		this._count++
		if (this._count > 1)
			return

		fInactivityTest := this._fInactivityTest
		SetTimer fInactivityTest, 0

		return
	}
	
	Inactivate()
	{
		fInactivityTest := this._fInactivityTest
		SetTimer fInactivityTest, 0
		return
	}

	ForceAction()
	{
		;this._last_idle_time := A_TimeIdlePhysical - this._delay * 1000 * 2
		this._force_action := true

		;indicate we will be manually exiting to prevent autoswitch sequence
		;from continuing if the user subsequently performs a manual exit.
		;g_exit_code := 1
	}

	;Obtain joystick state
	GetJoyState()
	{
		global

		local n, horiz, vert, joylist, state

		JoyX := Map()
		JoyY := Map()

		horiz := gCfg.joy_horiz == "all" ? 1 : 0
    	vert := gCfg.joy_vert == "all" ? 1 : 0

		joylist := this._joylist

		for n, state in joylist
		{
			id := state["id"]
			;%id%JoyX := GetKeyState(id "JoyX")
			;%id%JoyY := GetKeyState(id "JoyY")

			JoyX[id] := GetKeyState(id "JoyX")
			JoyY[id] := GetKeyState(id "JoyY")

			;OutputDebug "JoyX: " JoyX[id] " state[X]: " state["X"] "`n"
			;OutputDebug "JoyY: " JoyY[id] " state[Y]: " state["Y"] "`n`n"

			if (JoyX[id] - state["X"] > 20 && horiz)
				return "r"
			if (JoyX[id] - state["X"] < -20 && horiz)
				return "l"
			if (JoyY[id] - state["Y"] > 20 && vert)
				return "d"
			if (JoyY[id] - state["Y"] < -20 && vert)
				return "u"
		}

		return
	}
	
	_inactivity_test(theHotkey:="")
	{
		global
		local n, id, x, y, joylist, sound_set, joy_test, logEntry, JoyX, JoyY

		joylist := this._joylist
		sound_set := false
		joy_test := "None detected"
		logEntry := ""
		JoyX := Map()
		JoyY := Map()

		;Whenever idle time drops below 1000, it must have been reset
		;by the press of a keyboard or mouse button.
		if (A_TimeIdlePhysical < 1000)
		{
			;SoundBeep
			this._last_idle_time := A_TimeIdlePhysical

			;SoundBeep
			;used to monitor activity by external frequency monitor
			this._action_count++ 
			;lastIdleTime := A_TimeIdlePhysical

			if (this._unmute)
				oMasterSound.On() ;force sound unmute

			if (idle_log)
			{
				t := FormatTime(A_Now, "hh:mm:ss")
				logEntry := "IdleInterrupted (key/mouse): [" . t . "]"			
			}
		}
		
		for n, state in joylist
		{
			id := state["id"]

			;x := %id%JoyX := GetKeyState(id "JoyX")
			;y := %id%JoyY := GetKeyState(id "JoyY")
			x := JoyX[id] := GetKeyState(id "JoyX")
			y := JoyY[id] := GetKeyState(id "JoyY")
		
			;if ((Abs(%id%JoyX - state["X"]) > 20) || Abs(%id%JoyY - state["Y"]) > 20)
			if ((Abs(JoyX[id] - state["X"]) > 20) || Abs(JoyY[id] - state["Y"]) > 20)
			{
				;SoundBeep
				this._action_count++
				this._last_idle_time := A_TimeIdlePhysical

				if (!sound_set && this._unmute) ;only do once per test
				{
					sound_set := true
					oMasterSound.On() ;force sound unmute
				}
				
				if (idle_log)
				{
					joy_test := "X:" . x .  "  Y:" . y 
					
					t := FormatTime(A_Now, "hh:mm:ss")
					logEntry := "IdleInterrupted (joy): [" . t . "] JoyTest: " . joy_test
				}
				break
			}
		}

		if (idle_log && logEntry)
		{
			IdleLogEntry(logEntry)
			logEntry := ""
		}

		;If there was keyboard/mouse activity since the last check, reset the last idle time
		;if (A_TimeIdlePhysical < this._last_idle_time)
		;{	
		;	this._last_idle_time := A_TimeIdlePhysical

			;if (this._unmute)
			;	oMasterSound.On() ;force sound unmute

			;if (idle_log)
			;{
			;	FormatTime, t , A_Now, hh:mm:ss
			;	logEntry := "IdleInterrupted (key/mouse): [" . t . "]"			
			;}
		;}

		if (idle_log && logEntry)
			IdleLogEntry(logEntry)

		;The delay time has been reached, so perform the action to be done
		timeIdlePhysical := A_TimeIdlePhysical
		if (timeIdlePhysical - this._last_idle_time > this._delay * 1000 || this._force_action) 
		{
			;fa := this._force_action
			;OutputDebug fa: %fa%`n
			;SoundBeep
			;OutputDebug idle: %A_TimeIdlePhysical% 
			
			this._force_action := false
			this._inactivity_action()
		}

		;Useful timer debug code
		;lit := this._last_idle_time
		;diff := timeIdlePhysical - lit
		;OutputDebug LastIdleTime: %lit%  TimeIdlePhysical: %timeIdlePhysical%  Diff: %diff% `n

		return
	}
	
	_inactivity_action()
	{
		this._last_idle_time := A_TimeIdlePhysical 
		;SoundBeep
		;oSchedule.Continue()
		this._callback.Call()	;normally, the AttractSwitch() function

		return
	}
	
	_joy_button_action(caller:="")
	{
		;a joystick button was pressed, so reset the last idle time
		this._last_idle_time := A_TimeIdlePhysical
		return
	}
}