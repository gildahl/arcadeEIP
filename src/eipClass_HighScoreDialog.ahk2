; arcadeEIP (eip.exe) - Arcade Emulator Integration Player
; HighScoreDialog Class Â© 2024 David G. Dahlstrom
; File: eipClass_HighScoreDialog.ahk2

;The High Score Dialog is one manifestation of the Dialog screen.
;See the CreateDialog() method of the CreateGUI class in eipClass_CreateGui
;for the code that creates the components of this screen.
class HighScoreDialog
{
    _bButtonPressed := false
    _pBitmap := []

    static GetInitials()
    {
        sInitials := ""
        Loop 3
        {
            sInitials := sInitials . gGui.guiDialog_HighScore_%A_Index%.Value
        }

        return sInitials
    }

    static GetScore()
    {
        sScore := ""
        Loop 10
        {
            if (gGui.guiDialog_HighScore_%A_Index+3%.Value != "-")
                sScore := sScore . gGui.guiDialog_HighScore_%A_Index+3%.Value
        }

        return sScore
    }

    ;Captures a screen image (but doesn't save it)
    static CaptureScreen()
    {
        Area := Area ?? { X: 0, Y: 0, W: A_ScreenWidth, H: A_ScreenHeight }
        GDIp.Startup()
        this._pBitmap := GDIp.BitmapFromScreen(Area)
    }

    ;Saves the captured screen image
    static SaveScreen()
    {
        if (gCfg.highscore_screenshots == 1)
        {
            if (CreateDirAndLog(gCfg.highscore_folder))
                GDIp.SaveBitmapToFile(this._pBitmap, gCfg.highscore_folder "\" gCfg.rom_name ".png") 
            else
                LogEntry("ERROR: Could not save highscore image.`n")
        }
    }

    static DeleteScreen()
    {
        DeleteAndLog("F", gCfg.highscore_folder "\" gCfg.rom_name ".png")
    }

    ;Dispose of the screen image
    static DisposeScreen()
    {
        GDIp.DisposeImage(HighScoreDialog._pBitmap)
        GDIp.Shutdown()
    }

    static HighScoreNavigate(sKey)
    {
        global gGui

        static nSelected := 1
        static oControl := gGui.guiDialog_HighScore_1
        static oControlFirstDigit := gGui.guiDialog_HighScore_4
        static oControlRegisterButton := gGui.guiDialog_HighScore_14
        static oInitials := Array("-"," ","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R",
                                "S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l",
                                "m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5",
                                "6","7","8","9","~","!","@","#","$","%","^","&","*","(",")","=","+","[","]","<",
                                ">","?","{","}",":",";",",",".","/","\","_") 

        static oDigits := Array("-","0","1","2","3","4","5","6","7","8","9")

        nMaxControls := 14

        ;select/launch key was pressed
        if (sKey == "s")
        {
            if (!this._bButtonPressed)
            {
                if (oControlRegisterButton.Enabled)
                {
                    this._bButtonPressed := true
                    oBASS.Play("select")

                    ControlClick oControlRegisterButton,,,,, "D"
                    Sleep 500
                    ControlClick oControlRegisterButton,,,,, "U"
                    oControlRegisterButton.Enabled := false

                    if (oControlRegisterButton.Text == "Register")
                    {        
                        HighScore.SetHighScore(this.GetScore(), this.GetInitials())

                        this.SaveScreen() 
                        this.HighScore()                        
                    }

                    if (oControlRegisterButton.Text == "Clear")
                    {
                        ;Send a NULL to the marquee to clear/remove the high score banner
                        oMarqueeMsg["Highscore"] := "NULL"

                        this.DeleteScreen() ;delete the high score .png image (if present)
                        this.HighScore() 
                    }

                    if (oControlRegisterButton.Text == "Cancel")
                    {
                        this.HighScore()
                    }
                }
            }
        }

        ;Up
        ;Keep in mind that for up and down, oControl is the currently selected control
        if (sKey == "u")
        {
            ;if first digit of score is a 0, don't permit any other digits to be changed
            if (nSelected >= 5 && nSelected <= 13 && oControlFirstDigit.Value == 0)
                return

            ;if user is changing an initial
            if (nSelected >= 1 && nSelected <= 3) 
            {
                ;permit list to wrap
                if (oControl.Value == oInitials[1])
                    oControl.Value := oInitials[oInitials.Length]
                else 
                    oControl.Value := oInitials[GetArrayIndex(oInitials, oControl.Value)-1]
            }

            ;if user is changing a digit in the score
            else if (nSelected >= 4 && nSelected <= 13) 
            {
                ;do nothing if cell is disabled
                if (oControl.Enabled) == false
                    return

                ;Skip "0" and/or "-" depending on the context
                if (oControl.Value == "0" && gGui.guiDialog_HighScore_%nSelected+1%.Enabled == true && nSelected < 13)
                    oControl.Value := oDigits[oDigits.Length]
                else if (oControl.Value == "-") 
                    oControl.Value := oDigits[oDigits.Length]
                else 
                    oControl.Value := oDigits[GetArrayIndex(oDigits, oControl.Value)-1]
            }

            oBASS.Play("click")

            if (nSelected == 4)
            {
                ;Don't allow zero if digit to right is enabled
                if (oControl.Value == "0" && gGui.guiDialog_HighScore_%nSelected+1%.Enabled)
                    oControl.Value := oDigits[oDigits.Length]

                ;Set the button and instructional text
                this.SetDialogHighScoreText("instructions")
            }

            ;allow pushing up the joystick to move back
            if (nSelected == 14)
            {
                oControl.Enable := false

                nSelected--
                oControl := gGui.guiDialog_HighScore_%nSelected%

                if (oControl.Value != "-")
                    oControl.Enabled := true

                oControl.Opt("+Border")
                oControl.Redraw

                ;Restore the button and instructional text
                this.SetDialogHighScoreText("instructions")
            }
        }

        ;Down
        if (sKey == "d")
        {
            ;if first digit of score is a 0, don't permit any other digits to be changed
            if (nSelected >= 5 && nSelected <= 13 && oControlFirstDigit.Value == 0)
                return

            ;if user is changing an initial
            if (nSelected >= 1 && nSelected <= 3)
            {
                ;permit list to wrap
                if (oControl.Value == oInitials[oInitials.Length])
                    oControl.Value := oInitials[1]
                else 
                    oControl.Value := oInitials[GetArrayIndex(oInitials, oControl.Value)+1]
            }

            ;if user is changing a digit in the score
            else if (nSelected >= 4 && nSelected <= 13) 
            {
                ;do nothing if cell is disabled
                if (oControl.Enabled) == false
                    return

                ;skip zero and "-" on first digit if second digit is enabled (special case)
                if (nSelected == 4 && oControl.Value == "9" && gGui.guiDialog_HighScore_%nSelected+1%.Enabled)
                    oControl.Value := "1"

                ;Skip "0" and/or "-" depending on the context
                else if (oControl.Value == oDigits[oDigits.Length] && gGui.guiDialog_HighScore_%nSelected+1%.Enabled == true && nSelected < 13)
                    oControl.Value := "0"
                else if (oControl.Value == oDigits[oDigits.Length])
                    oControl.Value := "-"
                else 
                    oControl.Value := oDigits[GetArrayIndex(oDigits, oControl.Value)+1]
            }

            oBASS.Play("click")

            if (nSelected == 4) ;first score digit field
            {
                ;Set the button and instructional text
                this.SetDialogHighScoreText("instructions")
            }
        }

        ;Right
        if (sKey == "r")
        {
            if (nSelected <= 13)
                oBASS.Play("browse")

            ;don't go anywhere when on the last control in the set
            if (nSelected == nMaxControls)
                return

            ;always remove the border from the cell we're leaving
            if (nSelected <= 14)
            {
                oControl.Opt("-Border")
                oControl.Redraw
            }

            ;disable digit if we are about to step off of it (going right) and it contains a "-"
            if (nSelected >= 4 && nSelected <= 13 && oControl.Value == "-")
                oControl.Enabled := false

            ;advance to the next control
            nSelected++
            oControl := gGui.guiDialog_HighScore_%nSelected%

            ;enable the next control
            if (nSelected == 4 && oControl.Enabled == false)
                oControl.Enabled := true

            ;enable control if the digit to the left of it was enabled
            if (nSelected >=5 && nSelected <= 13 && gGui.guiDialog_HighScore_%nSelected-1%.Enabled == true && oControlFirstDigit.Value != "0") 
                oControl.Enabled := true

            ;if on the register button, enable it and update 
            ;button's instructive text.
            if (nSelected == 14)
            {
                oBASS.Play("page")
                oControl.Enabled := true
                ControlFocus oControl
                this.SetDialogHighScoreText("buttons")
            }
            else ;otherwise give it a border
            {
                oControl.Opt("+Border")
                oControl.Redraw
            }

            return
        }

        ;Left
        if (sKey == "l")
        {
            if (nSelected >= 3)
                oBASS.Play("browse")
            else if (nSelected == 2)
                oBASS.Play("error")

            ;don't go anywhere if we're on the first control in the set
            if (nSelected == 1)
                return

            ;always remove the border from any cell we're leaving.
            if (nSelected < 14)
            {
                oControl.Opt("-Border")
                oControl.Redraw
            }

            ;Always disable digit field when stepping off it going to the left if it contains a "-"
            if (nSelected >= 4 && nSelected <= 14 && oControl.Value == "-")
                oControl.Enabled := false

            if (nSelected == 14) ;register button field
            {
                ;Set the button and instructional text
                this.SetDialogHighScoreText("instructions")
            }

            ;go to the previous control
            nSelected--
            oControl := gGui.guiDialog_HighScore_%nSelected%

            ;Always enable leftmost digit when moving to the left
            if (nSelected == 4)
                oControl.Enabled := true

            ;Enable other digits only if the previous one was enabled
            if (nSelected >= 5 && nSelected <= 14 && gGui.guiDialog_HighScore_%nSelected-1%.Enabled == true)
                oControl.Enabled := true

            ;put border around last digit when coming back from the registration button
            ;and disable the button
            if (nSelected == 13)
            {
                oControl.Opt("+Border")
                oControl.Redraw

                oControlRegisterButton.Enabled := false
            }
            else ;otherwise, just enable the border
            {
                oControl.Opt("+Border")
                oControl.Redraw
            }

            return
        }

        if (sKey == "reset")
        {
            nSelected := 1
            oControl := gGui.guiDialog_HighScore_1
            this._bButtonPressed := false

            this.SetDialogHighScoreText("instructions", true)

            gGui.guiDialog_HighScore_CurrentScore.Value := HighScore.FormattedHighScore
            gGui.guiDialog_HighScore_Warning.Value := ""

            loop 14
            {
                if (A_Index == 1)
                {
                    gGui.guiDialog_HighScore_%A_Index%.Opt("+Border")
                    gGui.guiDialog_HighScore_%A_Index%.Value := "A"
                }
                if (A_Index >= 2 and A_Index <= 3)
                {
                    gGui.guiDialog_HighScore_%A_Index%.Opt("-Border")
                    gGui.guiDialog_HighScore_%A_Index%.Value := "A"
                }
                if (A_Index >= 4 and A_Index <= 13)
                {
                    gGui.guiDialog_HighScore_%A_Index%.Opt("-Border")
                    gGui.guiDialog_HighScore_%A_Index%.Value := "-"
                    gGui.guiDialog_HighScore_%A_Index%.Enabled := false
                }
                if (A_Index == 14)
                {
                    gGui.guiDialog_HighScore_%A_Index%.Enabled := false
                }
            }         
        }
    }

    static SetDialogHighScoreText(sOption,bReset:=false)
    {
        if (sOption == "instructions")
        {
            ;Set the button and instructional text
            if (gGui.guiDialog_HighScore_4.Value == "-" || bReset == true)
            {
                gGui.guiDialog_HighScore_14.Text := "Cancel"
                gGui.guiDialog_HighScore_Instructions1.Value := "Did you break this high score?"
                gGui.guiDialog_HighScore_Instructions2.Value := "If so, enter your initials and new high score!"
                gGui.guiDialog_HighScore_Warning.Value := ""

                if (bReset == true)
                    return
            }
            else if (gGui.guiDialog_HighScore_4.Value == "0")
            {
                gGui.guiDialog_HighScore_14.Text := "Clear"
                gGui.guiDialog_HighScore_Instructions1.Value := "After entering your score, move to the Register button to save it."
                gGui.guiDialog_HighScore_Instructions2.Value := "If you save a score of zero, it will clear the high score for this game."
                gGui.guiDialog_HighScore_Warning.Value := ""
            }
            else
            {
                gGui.guiDialog_HighScore_14.Text := "Register"
                gGui.guiDialog_HighScore_Instructions1.Value := "After entering your score, move to the Register button to save it."
                gGui.guiDialog_HighScore_Instructions2.Value := "If you save a score of zero, it will clear the high score for this game."
                gGui.guiDialog_HighScore_Warning.Value := ""
            }
        }
        else if (sOption == "buttons")
        {
            if (gGui.guiDialog_HighScore_14.Text == "Cancel")
            {
                gGui.guiDialog_HighScore_Instructions1.Value := "To cancel, press the select key on the control panel"
                gGui.guiDialog_HighScore_Instructions2.Value := "or press the show/hide scorecard key again."
            }
            else if (gGui.guiDialog_HighScore_14.Text == "Clear")
            {
                gGui.guiDialog_HighScore_Warning.Value := "This action will clear the currently saved high score for this game."
                gGui.guiDialog_HighScore_Instructions1.Value := "Press the select key on the control panel to clear."
                gGui.guiDialog_HighScore_Instructions2.Value := "To exit without clearing, press the show/hide scorecard key again.."
            }
            else if (gGui.guiDialog_HighScore_14.Text == "Register")
            {
                gGui.guiDialog_HighScore_Instructions1.Value := "Press select key on the control panel to save."
                gGui.guiDialog_HighScore_Instructions2.Value := "To exit without saving, press the show/hide scorecard key again."
            
                if (this.GetScore() < HighScore.Score)
                {
                    gGui.guiDialog_HighScore_Warning.Value := "New score is lower than the currently registered score."
                    gGui.guiDialog_HighScore_Instructions1.Value := "You may go back to edit or press select key on the control panel to save."
                }

                if (this.GetScore() == HighScore.Score)
                {
                    gGui.guiDialog_HighScore_Warning.Value := "New score is the same as the currently registered score." 
                    gGui.guiDialog_HighScore_Instructions1.Value := "You may go back to edit or press select key on the control panel to save."
                }
            }
        }
    }

    ;Displays the HighScore entry screen
    static HighScore(theHotKey:="")
    {
        global gGui, g_guihighscore

        if (!g_guihighscore)
        {
            if (gCfg.highscore_screenshots)
                oBASS.Play("shutter")
            else
                oBASS.Play("highscore")

            ;Capture the screen (but don't save it yet)
            HighScoreDialog.CaptureScreen()

            ModifyHotkeys("blocking")
            ControlActivationState.EnableHighScoreControls()

            HighScoreDialog.HighScoreNavigate("reset")

            ;Set speed of RunWaitTimer frequency
            ;Determines scroll performance in the select screen.
            SetTimer RunWaitTimer, 150

            oDetectInactivity.Suspend() ;turn off the timer

            guiAlpha.Opt("+AlwaysOnTop")
            guiDialog.Opt("+AlwaysOnTop")

            ;Get the dialog dimensions. Convert these units to non-dpi
            ;adjusted pixels since WinMove requires this.
            nX := DPIToPixels(CreateGUI.DialogScreenX)
            nY := DPIToPixels(CreateGUI.DialogScreenY)
            nW := DPIToPixels(CreateGUI.DialogScreenWidth)
            nH := DPIToPixels(CreateGUI.DialogScreenHeight)
 
            WinMove nX, nY, nW, nH, guiAlpha
            guiAlpha.Opt("+Border")

            WinSetTransparent 0, "ahk_id " . gGui.guiAlpha_Overlay.Hwnd
            oFadeAlphaWindow.Start(1,200,20,16) ;dim the alpha screen

            Sleep(100) ;delay to allow fade-in to start

            ;Get the game name
            rom_title := oEmulators.Emulators[gCfg.sys_key].meta_names.GetTitle(gCfg.rom_file)
            romTitle := rom_title ? rom_title : gCfg.rom_name
            
            ;strip name of enclosures if needed
            if (oEmulators.Emulators[gCfg.sys_key].clean_lists >= 1) 
                romTitle := StripEnclosures(romTitle, 1)
            gGui.guiDialog_HighScore_Title.Value := romTitle

            ;reduce the font if game name won't fit
            fsz := CreateGUI.DialogScreenTitleFontSize
            fnt := gCfg.lst_font_type
            Loop
            {
                tsz := GetTextExtentPoint(romTitle, fnt, fsz)
                if (tsz < nW) 
                    break
                else
                    fsz--
            }

            gGui.guiDialog_HighScore_Title.SetFont("s" fsz " cWhite", fnt)

            Loop 14
            {
                gGui.guiDialog_HighScore_%A_Index%.Visible := true
            }

            gGui.guiDialog_HighScore_Title.Visible := true
            gGui.guiDialog_HighScore_CurrentScore.Visible := true
            gGui.guiDialog_HighScore_Instructions1.Visible := true
            gGui.guiDialog_HighScore_Instructions2.Visible := true
            gGui.guiDialog_HighScore_Warning.Visible := true

            ;global that lets us know the high score screen is displayed
            g_guihighscore := true
        }
        else
        {
            ;clean-up screen bitmap
            HighScoreDialog.DisposeScreen()

            ;Hide the overlay text
            Loop 14
            {
                gGui.guiDialog_HighScore_%A_Index%.Visible := false
            }

            gGui.guiDialog_HighScore_Title.Visible := false
            gGui.guiDialog_HighScore_CurrentScore.Visible := false
            gGui.guiDialog_HighScore_Instructions1.Visible := false
            gGui.guiDialog_HighScore_Instructions2.Visible := false
            gGui.guiDialog_HighScore_Warning.Visible := false

            ;Fade the alpha screen, then return it back to fullscreen 
            oFadeAlphaWindow.Start(200,0,20,16) ;undim the alpha screen
            Sleep(750) ;wait till fade is complete
            guiAlpha.Hide ;prevents screen artifacts/flashing
            guiAlpha.Opt("-Border")
            WinMove 0, 0, A_ScreenWidth, A_ScreenHeight, guiAlpha ;return to fullscreen
            guiAlpha.Show("NA") ;re-show without activation so its ready for next time

            oDetectInactivity.Resume() ;turn the timer back on

            ;Reset RunWaitTimer to default frequecy
            SetTimer RunWaitTimer, runwait_default_freq

            ControlActivationState.DisableHighScoreControls()
            ModifyHotkeys("passthrough")

            guiAlpha.Opt("-AlwaysOnTop")

            ;global to let us know the high score screen is hidden
            g_guihighscore := false
        }

        return
    }
}

;https://www.autohotkey.com/boards/viewtopic.php?t=116217
;{ GDIp Class - Select GDIp library functions converted to a class specifically for this script
#DllLoad 'GdiPlus'
Class GDIp
{
	;{ Startup
	Static Startup()
	{
		If (this.HasProp("Token"))
			Return
		input := Buffer((A_PtrSize = 8) ? 24 : 16, 0)
		NumPut("UInt", 1, input)
		DllCall("gdiplus\GdiplusStartup", "UPtr*", &pToken := 0, "UPtr", input.ptr, "UPtr", 0)
		this.Token := pToken
	}
	;}
	;{ Shutdown
	Static Shutdown()
	{
		If (this.HasProp("Token"))
			DllCall("Gdiplus\GdiplusShutdown", "UPtr", this.DeleteProp("Token"))
	}
	;}
	;{ BitmapFromScreen
	Static BitmapFromScreen(Area)
	{
		chdc := this.CreateCompatibleDC()
		hbm := this.CreateDIBSection(Area.W, Area.H, chdc)
		obm := this.SelectObject(chdc, hbm)
		hhdc := this.GetDC()
		this.BitBlt(chdc, 0, 0, Area.W, Area.H, hhdc, Area.X, Area.Y)
		this.ReleaseDC(hhdc)
		pBitmap := this.CreateBitmapFromHBITMAP(hbm)
		this.SelectObject(chdc, obm), this.DeleteObject(hbm), this.DeleteDC(hhdc), this.DeleteDC(chdc)
		Return pBitmap
	}
	;}
	;{ CreateCompatibleDC
	Static CreateCompatibleDC(hdc := 0)
	{
		Return DllCall("CreateCompatibleDC", "UPtr", hdc)
	}
	;}
	;{ CreateDIBSection
	Static CreateDIBSection(w, h, hdc := "", bpp := 32, &ppvBits := 0, Usage := 0, hSection := 0, Offset := 0)
	{
		hdc2 := hdc ? hdc : this.GetDC()
		bi := Buffer(40, 0)
		NumPut("UInt", 40, bi, 0)
		NumPut("UInt", w, bi, 4)
		NumPut("UInt", h, bi, 8)
		NumPut("UShort", 1, bi, 12)
		NumPut("UShort", bpp, bi, 14)
		NumPut("UInt", 0, bi, 16)

		hbm := DllCall("CreateDIBSection"
			, "UPtr", hdc2
			, "UPtr", bi.ptr    ; BITMAPINFO
			, "uint", Usage
			, "UPtr*", &ppvBits
			, "UPtr", hSection
			, "uint", Offset, "UPtr")

		If !hdc
			this.ReleaseDC(hdc2)
		Return hbm
	}
	;}
	;{ SelectObject
	Static SelectObject(hdc, hgdiobj)
	{
		Return DllCall("SelectObject", "UPtr", hdc, "UPtr", hgdiobj)
	}
	;}
	;{ BitBlt
	Static BitBlt(ddc, dx, dy, dw, dh, sdc, sx, sy, raster := "")
	{
		Return DllCall("gdi32\BitBlt"
			, "UPtr", ddc
			, "int", dx, "int", dy
			, "int", dw, "int", dh
			, "UPtr", sdc
			, "int", sx, "int", sy
			, "uint", raster ? raster : 0x00CC0020)
	}
	;}
	;{ CreateBitmapFromHBITMAP
	Static CreateBitmapFromHBITMAP(hBitmap, hPalette := 0)
	{
		DllCall("gdiplus\GdipCreateBitmapFromHBITMAP", "UPtr", hBitmap, "UPtr", hPalette, "UPtr*", &pBitmap := 0)
		Return pBitmap
	}
	;}
	;{ CreateHBITMAPFromBitmap
	Static CreateHBITMAPFromBitmap(pBitmap, Background := 0xffffffff)
	{
		DllCall("gdiplus\GdipCreateHBITMAPFromBitmap", "UPtr", pBitmap, "UPtr*", &hBitmap := 0, "int", Background)
		Return hBitmap
	}
	;}
	;{ DeleteObject
	Static DeleteObject(hObject)
	{
		Return DllCall("DeleteObject", "UPtr", hObject)
	}
	;}
	;{ ReleaseDC
	Static ReleaseDC(hdc, hwnd := 0)
	{
		Return DllCall("ReleaseDC", "UPtr", hwnd, "UPtr", hdc)
	}
	;}
	;{ DeleteDC
	Static DeleteDC(hdc)
	{
		Return DllCall("DeleteDC", "UPtr", hdc)
	}
	;}
	;{ DisposeImage
	Static DisposeImage(pBitmap, noErr := 0)
	{
		If (StrLen(pBitmap) <= 2 && noErr = 1)
			Return 0

		r := DllCall("gdiplus\GdipDisposeImage", "UPtr", pBitmap)
		If (r = 2 || r = 1) && (noErr = 1)
			r := 0
		Return r
	}
	;}
	;{ GetDC
	Static GetDC(hwnd := 0)
	{
		Return DllCall("GetDC", "UPtr", hwnd)
	}
	;}
	;{ GetDCEx
	Static GetDCEx(hwnd, flags := 0, hrgnClip := 0)
	{
		Return DllCall("GetDCEx", "UPtr", hwnd, "UPtr", hrgnClip, "int", flags)
	}
	;}
	;{ SaveBitmapToFile
	Static SaveBitmapToFile(pBitmap, sOutput, Quality := 75, toBase64 := 0)
	{
		_p := 0

		SplitPath sOutput, , , &Extension
		If !RegExMatch(Extension, "^(?i:BMP|DIB|RLE|JPG|JPEG|JPE|JFIF|GIF|TIF|TIFF|PNG)$")
			Return -1

		Extension := "." Extension
		DllCall("gdiplus\GdipGetImageEncodersSize", "uint*", &nCount := 0, "uint*", &nSize := 0)
		ci := Buffer(nSize)
		DllCall("gdiplus\GdipGetImageEncoders", "uint", nCount, "uint", nSize, "UPtr", ci.ptr)
		If !(nCount && nSize)
			Return -2

		Static IsUnicode := StrLen(Chr(0xFFFF))
		If (IsUnicode)
		{
			StrGet_Name := "StrGet"
			Loop nCount
			{
				sString := %StrGet_Name%(NumGet(ci, (idx := (48 + 7 * A_PtrSize) * (A_Index - 1)) + 32 + 3 * A_PtrSize, "UPtr"), "UTF-16")
				If !InStr(sString, "*" Extension)
					Continue

				pCodec := ci.ptr + idx
				Break
			}
		} Else
		{
			Loop nCount
			{
				Location := NumGet(ci, 76 * (A_Index - 1) + 44, "UPtr")
				nSize := DllCall("WideCharToMultiByte", "uint", 0, "uint", 0, "uint", Location, "int", -1, "uint", 0, "int", 0, "uint", 0, "uint", 0)
				sString := Buffer(nSize)
				DllCall("WideCharToMultiByte", "uint", 0, "uint", 0, "uint", Location, "int", -1, "str", sString, "int", nSize, "uint", 0, "uint", 0)
				If !InStr(sString, "*" Extension)
					Continue

				pCodec := ci.ptr + 76 * (A_Index - 1)
				Break
			}
		}

		If !pCodec
			Return -3

		If (Quality != 75)
		{
			Quality := (Quality < 0) ? 0 : (Quality > 100) ? 100 : Quality
			If (Quality > 90 && toBase64 = 1)
				Quality := 90

			If RegExMatch(Extension, "^\.(?i:JPG|JPEG|JPE|JFIF)$")
			{
				DllCall("gdiplus\GdipGetEncoderParameterListSize", "UPtr", pBitmap, "UPtr", pCodec, "uint*", &nSize)
				EncoderParameters := Buffer(nSize, 0)
				DllCall("gdiplus\GdipGetEncoderParameterList", "UPtr", pBitmap, "UPtr", pCodec, "uint", nSize, "UPtr", EncoderParameters.ptr)
				nCount := NumGet(EncoderParameters, "UInt")
				Loop nCount
				{
					elem := (24 + A_PtrSize) * (A_Index - 1) + 4 + (pad := (A_PtrSize = 8) ? 4 : 0)
					If (NumGet(EncoderParameters, elem + 16, "UInt") = 1) && (NumGet(EncoderParameters, elem + 20, "UInt") = 6)
					{
						_p := elem + EncoderParameters.ptr - pad - 4
						NumPut(Quality, NumGet(NumPut(4, NumPut(1, _p + 0, "UPtr") + 20, "UInt"), "UPtr"), "UInt")
						Break
					}
				}
			}
		}

		If (toBase64 = 1)
		{
			; part of the function extracted from ImagePut by iseahound
			; https://www.autohotkey.com/boards/viewtopic.php?f=6&t=76301&sid=bfb7c648736849c3c53f08ea6b0b1309
			DllCall("ole32\CreateStreamOnHGlobal", "UPtr", 0, "int", true, "UPtr*", &pStream := 0)
			_E := DllCall("gdiplus\GdipSaveImageToStream", "UPtr", pBitmap, "UPtr", pStream, "UPtr", pCodec, "uint", _p)
			If _E
				Return -6

			DllCall("ole32\GetHGlobalFromStream", "UPtr", pStream, "uint*", &hData)
			pData := DllCall("GlobalLock", "UPtr", hData, "UPtr")
			nSize := DllCall("GlobalSize", "uint", pData)

			bin := Buffer(nSize, 0)
			DllCall("RtlMoveMemory", "UPtr", bin.ptr, "UPtr", pData, "uptr", nSize)
			DllCall("GlobalUnlock", "UPtr", hData)
			ObjRelease(pStream)
			DllCall("GlobalFree", "UPtr", hData)

			; Using CryptBinaryToStringA saves about 2MB in memory.
			DllCall("Crypt32.dll\CryptBinaryToStringA", "UPtr", bin.ptr, "uint", nSize, "uint", 0x40000001, "UPtr", 0, "uint*", &base64Length := 0)
			base64 := Buffer(base64Length, 0)
			_E := DllCall("Crypt32.dll\CryptBinaryToStringA", "UPtr", bin.ptr, "uint", nSize, "uint", 0x40000001, "UPtr", &base64, "uint*", base64Length)
			If !_E
				Return -7

			bin := Buffer(0)
			Return StrGet(base64, base64Length, "CP0")
		}

		_E := DllCall("gdiplus\GdipSaveImageToFile", "UPtr", pBitmap, "WStr", sOutput, "UPtr", pCodec, "uint", _p)
		Return _E ? -5 : 0
	}
	;}
}
;}