; arcadeEIP (eip.exe) - Arcade Emulator Integration Player
; Â© 2024 David G. Dahlstrom
; File: eipClass_CreateGui.ahk2

;static class to create arcadeEIP graphical screens.
class CreateGUI
{
    nDialogScreenWidth := nScreenWidth
    nDialogScreenHeight := nScreenHeight
    nDialogPositionX := 0
    nDialogPositionY := 0
    nDialogScreenTitleFontSize := 40*3/4

    static CreateScreens()
    {
        this.CreateBackgroundScreen()  ;The black (or optionally colored) background 
        this.CreateAlphaScreen()       ;Transparent overlay for fade and pause images
        this.CreateDialogScreen()      ;Overlay screen containing various messages, inputs, etc.
        this.CreateSelectScreen()      ;The game selector menu screen
        this.CreateStartScreen()       ;The startup bookend screen
        this.CreateExitScreen()        ;The exit bookend screen
    }

    ;Recreate only these screens when a new game is
    ;switched to in the same session.
    static ScreenRefresh()
    {
        guiAlpha.Destroy()
        guiStart.Destroy()
        guiExit.Destroy()

        this.CreateAlphaScreen()
        this.CreateStartScreen()
        this.CreateExitScreen()
    }

    ;A simple black (or optionally colored) background screen
    static CreateBackgroundScreen()
    {
        global guiBackground

        guiBackground := Gui(, "eipGui - guiBackground")
        guiBackground.Opt("-Caption")
        guiBackground.BackColor := start_back_color
        
        return
    }

    ;This is a general purpose screen for presenting static and interactive dialogs
    ;such as for the "Game Locked" message or the high score entry dialog.
    static CreateDialogScreen()
    {
        global gGui, guiDialog

        nScreenTopY := 0
        nScreenBottomY := 0
        nScreenLeftX := 0
        nScreenRightX := 0

        guiDialog := Gui(, "eipGui - guiDialog")
        guiDialog.Opt("-Caption")
        guiDialog.BackColor := "Black" 

        ;Create the dialog screen

        ;All controls and their positions in this dialog are keyed to the font size. Thus, changing
        ;the font size will automatically rescale and reposition the screen relative to that size
        nBaseFontSize := 40
        guiDialog.SetFont("s" nBaseFontSize, gCfg.lst_font_type)

        ;********************************************************************************************************

        ;This label is for any general message displayed in the center of the screen
        ;Such as for "Game Locked" messages
        gGui.guiDialog_Banner := guiDialog.AddText("cWhite w" . nScreenWidth . " Center vDialogLabel", "Pause")
        gGui.guiDialog_Banner.GetPos(&label_posX, &label_posY, &label_posW, &label_posH)
        label_xpos := nScreenWidth / 2 - label_posW / 2
        label_ypos := nScreenHeight / 2 - label_posH / 2 

        gGui.guiDialog_Banner.Move(label_xpos, label_ypos)
        gGui.guiDialog_Banner.Visible := false ;hide this for now.        

        ;********************************************************************************************************
        
        ;Build the high score dialog componnts
        nScreenTopY := nScreenHeight / 2 - label_posH * 3 ;where top of dialog box should be
        nUnitHeight := label_posH ;a standard unit height based on font size

        loop 3
        {
            nControl := A_Index

            oControl := guiDialog.AddText("cWhite Border Center vDialog_Control_%" nControl "%", "W") ;initially setting to "W" ensures width is sufficient
            oControl.GetPos(&label_posX, &label_posY, &label_posW, &label_posH)
            label_xpos := nScreenWidth / 2 - label_posW * 3 + label_posW * A_Index + label_posW / 2
            label_ypos := nScreenHeight / 2 - label_posH * 3/4
        
            oControl.Move(label_xpos, label_ypos)
            oControl.Value := "A"
            if (nControl >1 )
                oControl.Opt("-Border")
            oControl.Visible := false ;hide this for now.

            gGui.guiDialog_HighScore_%nControl% := oControl
        }

        nScreenLeftX := nScreenWidth / 2 - label_posW * 6 
        nScreenRightX := nScreenWidth / 2 - label_posW * 6 + label_posW * 12

        this.nDialogScreenTitleFontSize := nBaseFontSize*3/4 ;save as a property for external use

        guiDialog.SetFont("s" Ceil(nBaseFontSize*3/4), gCfg.lst_font_type)
        gGui.guiDialog_HighScore_Title := guiDialog.AddText("cWhite x" nScreenLeftX " y" nScreenTopY+label_posH/5 " w" . nScreenRightX-nScreenLeftX . " Center vCurrentHighScore", "Current High Score")
        gGui.guiDialog_HighScore_Title.GetPos(, &title_posY, , &title_posH)
        gGui.guiDialog_HighScore_Title.Visible := false

        guiDialog.SetFont("s" nBaseFontSize/2)
        gGui.guiDialog_HighScore_CurrentScore := guiDialog.AddText("cWhite x" nScreenLeftX " y" title_posY + title_posH + 10 " w" . nScreenRightX-nScreenLeftX . " Center vHighScore", "123456789  By: DGD")
        guiDialog.SetFont("s" nBaseFontSize)
        gGui.guiDialog_HighScore_CurrentScore.Visible := false

        ;Create score editor
        loop 10
        {
            nControl := A_Index + 3

            oControl := guiDialog.AddText("cWhite Border Center vDialog_Control_%" nControl "%", "W") ;initially setting to "W" ensures width is sufficient
            oControl.GetPos(&label_posX, &label_posY, &label_posW, &label_posH)
            label_xpos := nScreenWidth / 2 - label_posW * 6 + label_posW * A_Index 
            label_ypos := nScreenHeight / 2 + label_posH / 2
        
            oControl.Move(label_xpos, label_ypos)
            oControl.Value := "-"
            oControl.Opt("-Border")
            oControl.Visible := false ;hide this for now.

            gGui.guiDialog_HighScore_%nControl% := oControl
        }

        nControl := 14

        ;Register Button
        guiDialog.SetFont("s" nBaseFontSize/2, "cGreen")
        oControl := guiDialog.AddButton("BackgroundGray -Wrap +0x1 +0xC00 vDialog_Control_%" nControl "%", "Register") 
        oControl.GetPos(&reg_posX, &reg_posY, &reg_posW, &reg_posH)
        label_xpos := nScreenWidth / 2 - reg_posW / 2 
        label_ypos := nScreenHeight / 2 + label_posH * 1.8
    
        oControl.Move(label_xpos, label_ypos)
        oControl.Visible := false ;hide this for now.

        gGui.guiDialog_HighScore_%nControl% := oControl

        nScreenBottomY := nScreenHeight / 2 + nUnitHeight * 4

        this.nDialogScreenWidth := nScreenRightX - nScreenLeftX
        this.nDialogScreenHeight := nScreenBottomY - nScreenTopY
        this.nDialogPositionX := nScreenLeftX
        this.nDialogPositionY := nScreenTopY

        ;Instructional text
        guiDialog.SetFont("s" nBaseFontSize/4)
        gGui.guiDialog_HighScore_Instructions2 := guiDialog.AddText("cWhite x" nScreenLeftX " y" nScreenBottomY-nUnitHeight/2 " w" . nScreenRightX-nScreenLeftX . " Center vInstructions2", "Instructions1")
        gGui.guiDialog_HighScore_Instructions2.GetPos(, &ins_posY, , &ins_posH)
        gGui.guiDialog_HighScore_Instructions2.Visible := false
        
        gGui.guiDialog_HighScore_Instructions1 := guiDialog.AddText("cWhite x" nScreenLeftX " y" ins_posY-ins_posH " w" . nScreenRightX-nScreenLeftX . " Center vInstructions1", "Instructions2")
        gGui.guiDialog_HighScore_Instructions1.Visible := false

        gGui.guiDialog_HighScore_Warning := guiDialog.AddText("cRed x" nScreenLeftX " y" ins_posY-ins_posH*2 " w" . nScreenRightX-nScreenLeftX . " Center vWarning", "Warning")
        gGui.guiDialog_HighScore_Warning.Visible := false
    }

    ;The Alpha Screen is a black and normally tranparent overlay.
    ;It also doubles as host to the images/info seen on pause (see the PauseKey() function).
    ;Using the fade_window_class, the screen can be faded in two ways:
    ;  1. Fading the entire screen using oFadeAlphaWindow (method used by the select gui)
    ;     This fades the entire window, thus introducing transparency.
    ;  2. Fading the AlphaOverlay control on it using oFadeAlphaOverlay (method used when pausing under the select gui)
    ;     This fades/darkens the contents (such as pause images)
    ;Note that this would probably alos be the place to add bezel support as a possible future enhancement.
    static CreateAlphaScreen()
    {
        global gGui, guiAlpha

        guiAlpha := Gui(, "eipGui - guiAlpha")
        guiAlpha.Opt("-Caption")
        guiAlpha.BackColor := "Black" 
    
        ;Create Overlay (used by oFadeAlphaOverlay to dim the screen)
        ;This is basically a pictureless picture control    
        gGui.guiAlpha_Overlay := guiAlpha.AddPicture("BackgroundTrans x0 y0 h" . nScreenHeight . " w" . nScreenWidth . " vAlphaOverlay")
        gGui.guiAlpha_Overlay.Visible := false

        ;Create "Pause" label - Not actually used at the moment	
        guiAlpha.SetFont("s40")
        gGui.guiAlpha_PauseLabel := guiAlpha.AddText("cWhite w" . nScreenWidth . " Center vPauseLabel", "Pause")
        gGui.guiAlpha_PauseLabel.GetPos(&label_posX, &label_posY, &label_posW, &label_posH)
        label_xpos := nScreenWidth / 2 - label_posW / 2
        label_ypos := nScreenHeight / 2 - label_posH / 2 

        gGui.guiAlpha_PauseLabel.Move(label_xpos, label_ypos)
        gGui.guiAlpha_PauseLabel.Visible := false ;hide this for now.
    }

    ;This creates the startup bookend screen
    static CreateStartScreen()
    {
        global gGui, guiStart

        label_tag := gCfg.rom_name ? "Game..." : "System..."
        
        ;Create Start Screen
        guiStart := Gui(, "eipGui - guiStart")
        guiStart.Opt("-Caption")
        guiStart.BackColor := start_back_color

        guiStart.SetFont("s50")
        gGui.guiStart_Label := guiStart.AddText("cWhite w" . nScreenWidth . " Center vLabel", "Loading " . label_tag)
        gGui.guiStart_Label.GetPos(&label_posX, &label_posY, &label_posW, &label_posH)
        label_xpos := nScreenWidth / 2 - label_posW / 2 
        gGui.guiStart_Label.Visible := false
        
        ;Create the information tag that appears centered at the bottom of the screen
        sys_tag := search_tag ? gCfg.proper_name . "[" . search_tag . "]" : gCfg.proper_name
        rom_tag := gCfg.rom_name ? sys_tag . " : " . gCfg.rom_name : sys_tag
        rom_tag := gCfg.rom_file ? sys_tag . " : " . gCfg.rom_file : rom_tag	

        ;Position the information tag
        guiStart.SetFont("s10")
        gGui.guiStart_Rom := guiStart.AddText("cWhite w" . nScreenWidth . " Center vRom", rom_tag)
        gGui.guiStart_Rom.GetPos(&rom_posX, &rom_posY, &rom_posW, &rom_posH)
        rom_ypos := nScreenHeight - rom_posH * 2
        rom_xpos := 0
        gGui.guiStart_Rom.Move(rom_xpos, rom_ypos)
        gGui.guiStart_Rom.Visible := false

        ;Create and position the license banner
        if (sLicenseType == "public" || gCfg.show_license == 1)
        {
            banner_ypos := nScreenHeight - rom_posH * 4
            gGui.guiStart_LicenseBanner := guiStart.AddText("cWhite w" . nScreenWidth . " Center vStartLicenseBanner", license_text)
            gGui.guiStart_LicenseBanner.Move(0, banner_ypos)
            gGui.guiStart_LicenseBanner.Visible := false
        }
        
        SplitPath gCfg.logo_full_path,,,, &OutNameNoExt

        if (!FileExist(gCfg.logo_full_path))
            LogEntry("NOTICE: logo file not found: " . gCfg.logo_full_path . "`n")

        ;Check to see if a LaunchBox/BigBox platform is being referenced
        ;(since we won't want to show a LaunchBox/BigBox system image here, but rather the name of the game)
        if (oLaunchBox.SetAssetPath(gCfg.logo_folder, gCfg.marquee_folder))
            bb_platform := oLaunchBox.GetCurrentPlatform()
        else
            bb_platform := ""

        ;Display logo
        if (FileExist(gCfg.logo_full_path) && OutNameNoExt != "default" && OutNameNoExt != gCfg.sys_key && OutNameNoExt != bb_platform)
        {
            gGui.guiStart_Logo := guiStart.AddPicture("BackgroundTrans vLogo", gCfg.logo_full_path)
            gGui.guiStart_Logo.GetPos(&logo_posX, &logo_posY, &logo_posW, &logo_posH)
            gGui.guiStart_Logo.Visible := false

            ;The following code ensures that the logo fits in its designated position
            ;on the screen and keeps its aspect ratio
            if (logo_posH > nScreenHeight / 4) ;keep logo to no more than 1/4 the screen height
            {
                logoH := nScreenHeight / 4 
                logoW := Floor(logo_posW * logoH / logo_posH)
            }
            else
            {
                logoH := logo_posH
                logoW := logo_posW
            }

            if (logoW > nScreenWidth / 2) ;keep logo to no more than 1/2 the screen width
            {
                origLogoW := logoW
                logoW := nScreenWidth / 2
                logoH := Floor(logoW * logoH/origLogoW)
            }        
            
            screen_centerH := nScreenHeight / 2
            screen_centerW := nScreenWidth / 2
            stack_height := logoH + label_posH * 2
            
            logo_ypos := screen_centerH + stack_height/2 - logoH
            logo_xpos := screen_centerW - logoW / 2
            
            label_ypos := logo_ypos - label_posH * 2
            
            gGui.guiStart_Label.Move(label_xpos, label_ypos)
            gGui.guiStart_Logo.Move(logo_xpos, logo_ypos, logoW, logoH)
        }
        else
        {
            if (gCfg.logo_full_path) ;but the file doesn't exist
            {
                ;Since we don't have an available image, show the game name instead
                rom_title := oEmulators.Emulators[gCfg.sys_key].meta_names.GetTitle(gCfg.rom_file)
                romTitle := rom_title ? rom_title : gCfg.rom_name

                guiStart.SetFont("s30")
                gGui.guiStart_GameTitle := guiStart.AddText("cWhite w" . nScreenWidth . " Center vGameTitle", romTitle)
                gGui.guiStart_GameTitle.GetPos(&title_posX, &title_posY, &title_posW, &title_posH)
                gGui.guiStart_GameTitle.Visible := false

                screen_centerH := nScreenHeight / 2
                screen_centerW := nScreenWidth / 2
                stack_height := title_posH + label_posH * 2
                
                title_ypos := screen_centerH + stack_height/2 - title_posH
                title_xpos := screen_centerW - title_posW / 2
                
                gGui.guiStart_GameTitle.Move(title_xpos, title_ypos)

                ;label_ypos := title_ypos - label_posH * 2            
            }

            label_ypos := nScreenHeight / 2 - label_posH / 2
            gGui.guiStart_Label.Move(label_xpos, label_ypos)
        }	
        
        return
    }

    static ShowStartScreenControls()
    {
        try gGui.guiStart_Label.Visible := true
        try gGui.guiStart_Rom.Visible := true
        try gGui.guiStart_LicenseBanner.Visible := true
        try gGui.guiStart_Logo.Visible := true
        try gGui.guiStart_GameTitle.Visible := true
    }

    static ShowExitScreenControls()
    {
        try gGui.guiExit_Label.Visible := true
        try gGui.guiExit_Logo.Visible := true
        try gGui.guiExit_GameTitle.Visible := true
    }

    ;This creates the exit bookend screen.
    ;Note that there's a lot of code shared between this an the start screen, but keeping
    ;them separate is intentional so as not to convolute efforts to customize them separately.
    static CreateExitScreen()
    {
        global gGui, guiExit

        label_tag := gCfg.rom_name ? "Game..." : "System..."
        
        ;Create Exit Screen
        guiExit := Gui(, "eipGui - guiExit")
        guiExit.Opt("-Caption")
        guiExit.BackColor := exit_back_color

        guiExit.SetFont("s50")
        gGui.guiExit_Label := guiExit.AddText("cWhite w" . nScreenWidth . " Center vLabel", "Exiting " . label_tag)
        gGui.guiExit_Label.GetPos(&label_posX, &label_posY, &label_posW, &label_posH)
        gGui.guiExit_Label.Visible := false

        label_xpos := nScreenWidth / 2 - label_posW / 2
        
        SplitPath gCfg.logo_full_path,,,, &OutNameNoExt

        ;Check to see if a LaunchBox/BigBox platform is being referenced
        ;(since we won't want to show a LaunchBox/BigBox system image here, but rather the name of the game)
        if (oLaunchBox.SetAssetPath(gCfg.logo_folder, gCfg.marquee_folder))
            bb_platform := oLaunchBox.GetCurrentPlatform()
        else
            bb_platform := ""

        ;logos
        if (FileExist(gCfg.logo_full_path) && OutNameNoExt != "default" && OutNameNoExt != gCfg.sys_key && OutNameNoExt != bb_platform)
        {
            gGui.guiExit_Logo := guiExit.AddPicture("BackgroundTrans vLogo", gCfg.logo_full_path)
            gGui.guiExit_Logo.GetPos(&logo_posX, &logo_posY, &logo_posW, &logo_posH)
            gGui.guiExit_Logo.Visible := false

            ;The following code ensures that the logo fits on the screen
            if (logo_posH > nScreenHeight / 4)
            {
                logoH := nScreenHeight / 4
                logoW := Floor(logo_posW * logoH/logo_posH)
            }
            else
            {
                logoH := logo_posH
                logoW := logo_posW
            }

            if (logoW > nScreenWidth / 2)
            {
                origLogoW := logoW
                logoW := nScreenWidth / 2
                logoH := Floor(logoW * logoH/origLogoW)
            }
            
            screen_centerH := nScreenHeight / 2
            screen_centerW := nScreenWidth / 2
            stack_height := logoH + label_posH * 2
            
            logo_ypos := screen_centerH + stack_height/2 - logoH
            logo_xpos := screen_centerW - logoW / 2
            
            label_ypos := logo_ypos - label_posH * 2

            gGui.guiExit_Label.Move(label_xpos, label_ypos)
            gGui.guiExit_Logo.Move(logo_xpos, logo_ypos, logoW, logoH)
        }
        else
        {
            if (gCfg.logo_full_path) ;but the file doesn't exist
            {
                ;Since we don't have an available image, show the game name in text
                rom_title := oEmulators.Emulators[gCfg.sys_key].meta_names.GetTitle(gCfg.rom_file)
                romTitle := rom_title ? rom_title : gCfg.rom_name

                guiExit.SetFont("s30")
                gGui.guiExit_GameTitle := guiExit.AddText("cWhite w" . nScreenWidth . " Center vGameTitle", romTitle)
                gGui.guiExit_GameTitle.GetPos(&title_posX, &title_posY, &title_posW, &title_posH)
                gGui.guiExit_GameTitle.Visible := false

                screen_centerH := nScreenHeight / 2
                screen_centerW := nScreenWidth / 2
                stack_height := title_posH + label_posH * 2
                
                title_ypos := screen_centerH + stack_height/2 - title_posH
                title_xpos := screen_centerW - title_posW / 2
                
                gGui.guiExit_GameTitle.Move(title_xpos, title_ypos)
                ;label_ypos := title_ypos - label_posH * 2
            }

            label_ypos := nScreenHeight / 2 - label_posH / 2
            gGui.guiExit_Label.Move(label_xpos, label_ypos)
        }
        
    return
    }

    ;This creates the main game selection screen (i.e. guiSelect).
    ;Note that we are just creating a basic black background window here. The actual contents
    ;and behavior of the selection screen are implemented in the select_list_control_class
    static CreateSelectScreen()
    {  
        global guiSelect

        guiSelect := Gui(, "eipGui - guiSelect")
        guiSelect.Opt("+LastFound -Caption")
        guiSelect.BackColor := "Black"
            
        return
    }

    static DialogScreenWidth
    {
        get => this.nDialogScreenWidth
    }

    static DialogScreenHeight
    {
        get => this.nDialogScreenHeight
    }

    static DialogScreenX
    {
        get => this.nDialogPositionX
    }

    static DialogScreenY
    {
        get => this.nDialogPositionY
    }

    static DialogScreenTitleFontSize
    {
        get => this.nDialogScreenTitleFontSize
    }
}