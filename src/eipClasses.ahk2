; arcadeEIP (eip.exe) - Arcade Emulator Integration Player
; Â© 2023 David G. Dahlstrom
; File: eipClass_Classes.ahk2

;This file contains smaller miscellaneous classes.

;This class is to support creation of the default configuration
;files (arcadeEIP.ini and arcadeEIP_Example.ini)
class config_creation_class
{
	_filename := ""
	_option := "All"
	_oContent := Array()
	_lineCount := 0

	__New(filename, option := "normal")
	{
		this._filename := filename
		this._option := option ;can be "normal" or "verbose"
		this._oContent := Array()
		this._lineCount := 0
	}

	Add(text_line)
	{
		this._oContent.Push(text_line)
		return
	}

	Write()
	{
		try 
		{
			fCfg := FileOpen(this._filename, "a")
			for n, line in this._oContent
			{
				if (this._option == "normal")
					if (line == "" || SubStr(line, 1, 8) == ";Comment" || n <= 5)	;skip comments and empty lines
						continue				
				
				line := line . "`n"	;terminate with line feed

				if (this._lineCount == 0 and this._option == "normal")
				{
					fCfg.write(";==============================================================================================================`n")
					fCfg.write(";Configuration file template, " . cConfigFileName . " generated by " . cProductName . ", v." . CodeVersion ".`n")
					fCfg.write(";A fresh copy of this file (" . cConfigFileName . ") may be created by using -createcfg at a command prompt.`n")
					fCfg.write(";You may also create a verbose instructional version of this file (with comments) by using -createcfgexample`n")
					fCfg.write(";==============================================================================================================`n")
				}

				if ((SubStr(line, 1, 1) == "[" || SubStr(line, 1, 2) == ";[") && this._option == "normal")	
				{	
					fCfg.write("`n") ;blank line before section headers
					this._lineCount++
				}
				else if (InStr(line, "<force_break>"))
					line := "`n"

				this._lineCount++
				fCfg.write(line)			
			}

			fCfg.close()
		}
		catch as e
		{		
			LogEntry("ERROR: Attempting to write config file, " this._filename ": " FormatErrorMessage(e) "`n")
			ExitApp
		}
		return
	}
}

;This class encapsulates a few light functions related to
;reading the configuration file (arcadeEIP.ini)
class config_file_class
{
	__New(config_file)
	{
		this._config_file := config_file

		config_sections := ""
		try	config_sections := IniRead(config_file)

		this._config_sections := config_sections
		this._section_map := Map()
	}

	GetGroupSections(grp)
	{
		grp := grp . "_"
		config_sections := this._config_sections

		grp_sections := Array()
		Loop Parse config_sections, "`n"
		{
			if (InStr(A_LoopField, grp))
			{
				grp_sections.Push(A_LoopField)
			}
		}
		return grp_sections
	}

	ConfigFile
	{
		get => this._config_file
	}

	;Sets global variables based on the key name for the section
	;Currently only used on the Key_Map section to set the key map variables.
	ReadSection(sec)
	{
		global
		local cfg, settings, oSetting, key, value

		cfg := this._config_file
		settings := IniRead(cfg, sec)

		Loop Parse settings, "`n"
		{
			oSetting := StrSplit(A_LoopField, "=", " ", 2)
			key := oSetting[1] 
			value := oSetting[2]

			gCfg.%key% := value
		}
	}
}

;class used to store full rom vector and match information
class rom_class
{
	_system := ""
	_fullPath := ""
	_matchType := ""
	
    __New(system, fullPath, matchType)
    {
        this._system := system
		this._fullPath := fullPath
		this._matchType := matchType
    }

	system
	{
		get => this._system
		set => this._system := value
	}
	
	fullPath
	{
		get => this._fullPath
		set => this._fullPath := value
	}

	matchType
	{
		get => this._matchType
		set => this._matchType := value
	}
	
	name
	{
		get {
			fullPath := this._fullPath
		    SplitPath fullPath,,,,&name
			return name
		}
	}
	
	fileName
	{
		get {
			fPath := this._fullPath
			SplitPath fPath, &fName
			return fName
		}
	}
	
	extension
	{
		get {
			fullPath := this._fullPath
			SplitPath fullPath,,,&extension
			return extension
		}
	}
	
	folder
	{
		get {
			fPath := this._fullPath
			SplitPath fPath,,&fFolder
			return ffolder
		}
	}
}

;suspend a process. 
;used by pause
class suspend_process_class
{
	_active := false

	SetPid(pid)
	{
		;this.Wait() ;make sure current process is resumed
		this._pid := pid
	}

	Suspend()
	{
		this._active := true
		pid := this._pid
		SuspendProc(true, pid)
	}

	Resume()
	{
		pid := this._pid
		SuspendProc(false, pid)
		this._active := false
	}

	Wait()
	{
		Loop
		{
			if (this._active)
				Sleep 100
			else
				break
		}
	}
	
	Active
	{		
		get => this._active
	}

	Pid
	{		
		get => this._pid
	}
}

;static class. Controls master sound on/off
class MasterSound
{
	static Off()
	{
		master_mute := SoundGetMute()
        if (master_mute == "Off")
			SoundSetMute +1
	}

	static On()
	{
		master_mute := SoundGetMute()
        if (master_mute == "On")
			SoundSetMute +1
	}
}

;static class supporting enabling and disabling controls
class ControlActivationState
{
	static EnablePauseControls()
	{
		global

		;Turn on the left/right keys for navigation
		Loop Parse gCfg.left_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.right_key, "CSV"
			Hotkey A_LoopField, "On"

		;Turn off the next and previous game controls
		Loop Parse gCfg.next_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.previous_key, "CSV"
			Hotkey A_LoopField, "Off"
	}

	static DisablePauseControls()
	{
		global
	
		;Turn off the left/right keys for navigation
		Loop Parse gCfg.left_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.right_key, "CSV"
			Hotkey A_LoopField, "Off"

		;Turn the next and previous game controls back on
		Loop Parse gCfg.next_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.previous_key, "CSV"
			Hotkey A_LoopField, "On"
	}

	static EnableSelectControls()
	{
		global

		Loop Parse gCfg.left_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.right_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.up_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.down_key, "CSV"
			Hotkey A_LoopField, "On"
		
		Loop Parse gCfg.launch_key, "CSV"
			Hotkey A_LoopField, "On"
		
		Loop Parse gCfg.pgdn_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.pgup_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.home_key, "CSV"
			Hotkey A_LoopField, "On"
		
		Loop Parse gCfg.end_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.list_mode_key, "CSV"
			Hotkey A_LoopField, "On"
		
		Loop Parse gCfg.edit_mode_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.all_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.genre_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.year_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.publisher_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.developer_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.players_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.rating_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.favorite_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.star5_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.star4_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.star3_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.star2_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.star1_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.star0_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.star_key, "CSV"
			Hotkey A_LoopField, "On"

		Loop Parse gCfg.favorites_key, "CSV"
			Hotkey A_LoopField, "On"
		
		Loop Parse gCfg.add_remove_key, "CSV"
			Hotkey A_LoopField, "On"

		;Turn off the next and previous game controls
		Loop Parse gCfg.next_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.previous_key, "CSV"
			Hotkey A_LoopField, "Off"
	}

	static DisableSelectControls()
	{
		global

		if (!g_pause_state) ;if pause is off
		{
			;pause uses these keys to cycle between images, so we only 
			;turn them off if pause is off
			Loop Parse gCfg.left_key, "CSV"
				Hotkey A_LoopField, "Off"

			Loop Parse gCfg.right_key, "CSV"
				Hotkey A_LoopField, "Off"

			;Turn the next and previous game controls back on, but if pause
			;is still on, we don't want them turned back on yet since exiting pause
			;will do that.
			Loop Parse gCfg.next_key, "CSV"
				Hotkey A_LoopField, "On"

			Loop Parse gCfg.previous_key, "CSV"
				Hotkey A_LoopField, "On"
		}

		Loop Parse gCfg.up_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.down_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.launch_key, "CSV"
			Hotkey A_LoopField, "Off"
	
		Loop Parse gCfg.pgdn_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.pgup_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.home_key, "CSV"
			Hotkey A_LoopField, "Off"
		
		Loop Parse gCfg.end_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.list_mode_key, "CSV"
			Hotkey A_LoopField, "Off"
		
		Loop Parse gCfg.edit_mode_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.all_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.genre_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.year_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.publisher_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.developer_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.players_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.rating_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.favorite_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.star5_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.star4_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.star3_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.star2_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.star1_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.star0_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.star_key, "CSV"
			Hotkey A_LoopField, "Off"

		Loop Parse gCfg.favorites_key, "CSV"
			Hotkey A_LoopField, "Off"
		
		Loop Parse gCfg.add_remove_key, "CSV"
			Hotkey A_LoopField, "Off"
	}
}